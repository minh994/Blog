[{"content":"1. JavaScript Variables: Khái Niệm Cơ Bản Biến trong JavaScript là một không gian lưu trữ dữ liệu có thể thay đổi trong suốt quá trình thực thi chương trình. JavaScript cho phép khai báo biến bằng ba từ khóa chính: var, let, và const.\n2. Cách Khai Báo Biến trong JavaScript 2.1. var: Biến Toàn Cục và Phạm Vi Hàm Trước đây, var được sử dụng rộng rãi để khai báo biến trong JavaScript. Biến khai báo bằng var có phạm vi toàn cục hoặc phạm vi hàm, điều này có thể gây ra một số vấn đề về quản lý phạm vi biến.\nCách sử dụng:\nvar x = 10; // Biến x được khai báo với phạm vi toàn cục hoặc hàm Khi nào sử dụng var: var hiện nay ít được sử dụng trong mã JavaScript hiện đại vì phạm vi của nó không rõ ràng. Tuy nhiên, bạn vẫn có thể sử dụng var nếu bạn cần hỗ trợ các trình duyệt cũ hoặc nếu bạn làm việc với mã cũ đã sử dụng var.\n2.2. let: Biến Phạm Vi Khối let được giới thiệu trong ES6 và được sử dụng để khai báo biến với phạm vi khối (block-scoped). Điều này giúp kiểm soát phạm vi biến tốt hơn và tránh được các lỗi trong mã nguồn.\nCách sử dụng:\nlet y = 20; // Biến y có phạm vi trong khối mã (block-scoped) Khi nào sử dụng let: Sử dụng let khi bạn muốn khai báo biến có thể thay đổi giá trị trong suốt vòng đời của nó. Điều này đặc biệt hữu ích khi làm việc với các biến cần thay đổi giá trị trong các vòng lặp hoặc điều kiện.\n2.3. const: Biến Hằng Số const được sử dụng để khai báo biến hằng số, nghĩa là giá trị của biến không thể thay đổi sau khi đã được gán.\nCách sử dụng:\nconst z = 30; // Biến hằng số z, không thể thay đổi giá trị Khi nào sử dụng const: Sử dụng const khi bạn muốn khai báo một biến mà giá trị của nó không bao giờ thay đổi trong suốt vòng đời của chương trình. Điều này giúp bảo vệ giá trị của biến khỏi bị thay đổi và tạo ra mã an toàn hơn.\n3. Phạm Vi Của Biến Phạm vi của biến trong JavaScript phụ thuộc vào cách khai báo biến:\nPhạm vi toàn cục: Biến được khai báo ngoài hàm hoặc khối mã có thể truy cập ở mọi nơi trong mã. Phạm vi hàm: Biến khai báo với var trong một hàm chỉ có thể truy cập trong hàm đó. Phạm vi khối: Biến khai báo với let và const trong một khối (ví dụ: trong if hoặc vòng lặp) chỉ có thể truy cập trong khối đó. Cách sử dụng phạm vi khối:\nif (true) { let blockScoped = \"I am block scoped\"; console.log(blockScoped); // In ra \"I am block scoped\" } console.log(blockScoped); // Lỗi: blockScoped không được định nghĩa ngoài khối 4. Gán Giá Trị Cho Biến JavaScript cho phép bạn gán giá trị cho biến bất kỳ lúc nào trong chương trình. Bạn có thể gán một giá trị cho biến khi khai báo hoặc sau đó.\nCách gán giá trị:\nlet a = 10; // Khai báo và gán giá trị cho biến a = 20; // Gán giá trị mới cho biến a console.log(a); // In ra 20 5. Biến Trong Các Loại Dữ Liệu JavaScript là ngôn ngữ động, nghĩa là bạn có thể thay đổi kiểu dữ liệu của biến trong suốt quá trình thực thi.\nCách sử dụng:\nlet number = 10; // number là kiểu số number = \"Hello\"; // number giờ là kiểu chuỗi console.log(number); // In ra \"Hello\" 6. Kết Luận Biến là một phần quan trọng trong JavaScript, giúp lưu trữ và quản lý dữ liệu trong suốt quá trình thực thi chương trình. Bạn có thể khai báo biến bằng var, let, hoặc const, tùy thuộc vào phạm vi và yêu cầu của chương trình. Hiểu rõ cách khai báo và sử dụng biến giúp bạn viết mã hiệu quả và tránh được các lỗi phổ biến.\nKhi nào sử dụng var, let, và const:\nvar: Chỉ sử dụng trong các trường hợp cần hỗ trợ trình duyệt cũ hoặc mã cũ. Tránh sử dụng trong mã mới vì phạm vi của nó có thể gây ra lỗi khó phát hiện. let: Sử dụng khi cần thay đổi giá trị của biến trong suốt vòng đời chương trình, đặc biệt là trong các vòng lặp và điều kiện. const: Sử dụng khi giá trị của biến không bao giờ thay đổi trong suốt chương trình, giúp bảo vệ dữ liệu và tạo ra mã an toàn hơn. ","description":"Khám phá cách khai báo và sử dụng biến trong JavaScript. Bài viết này sẽ giúp bạn hiểu về các cách khai báo biến, phạm vi và các quy tắc liên quan đến biến trong JavaScript.","tags":["javascript","variables","programming","blog"],"title":"JavaScript Variables Khai Báo và Sử Dụng","uri":"/post/2020/javascript-variables/"},{"content":"1. Giới Thiệu về Lặp qua Mảng trong JavaScript Lặp qua mảng là một trong những thao tác phổ biến khi làm việc với JavaScript. Các phương thức lặp qua mảng giúp bạn dễ dàng thao tác với từng phần tử trong mảng, từ việc hiển thị thông tin, xử lý dữ liệu, đến việc tạo ra các mảng mới.\nJavaScript cung cấp nhiều cách để lặp qua mảng, bao gồm cả các phương thức cơ bản và các phương thức nâng cao cho phép bạn thực hiện các phép toán phức tạp.\n2. Phương Thức forEach() Phương thức forEach() cho phép bạn thực hiện một hành động trên mỗi phần tử trong mảng.\nCách sử dụng: let numbers = [1, 2, 3, 4, 5]; numbers.forEach(function(number) { console.log(number); // In ra từng phần tử trong mảng }); Sử dụng với Arrow Function: numbers.forEach(number =\u003e console.log(number)); forEach() không trả về giá trị, chỉ thực hiện một hành động với từng phần tử. Không thể dừng hoặc tiếp tục vòng lặp bằng break hay continue như trong vòng lặp for. 3. Phương Thức map() Phương thức map() cho phép bạn tạo một mảng mới với kết quả của mỗi phần tử trong mảng cũ được xử lý bởi một hàm callback.\nCách sử dụng: let numbers = [1, 2, 3, 4, 5]; let doubled = numbers.map(function(number) { return number * 2; }); console.log(doubled); // [2, 4, 6, 8, 10] map() trả về một mảng mới, mảng gốc không thay đổi. Sử dụng với Arrow Function: let doubled = numbers.map(number =\u003e number * 2); console.log(doubled); // [2, 4, 6, 8, 10] 4. Phương Thức filter() Phương thức filter() tạo ra một mảng mới chứa các phần tử đáp ứng điều kiện nhất định từ mảng gốc.\nCách sử dụng: let numbers = [1, 2, 3, 4, 5]; let evenNumbers = numbers.filter(function(number) { return number % 2 === 0; }); console.log(evenNumbers); // [2, 4] filter() trả về một mảng mới chứa tất cả các phần tử thỏa mãn điều kiện, hoặc một mảng rỗng nếu không có phần tử nào thỏa mãn. Sử dụng với Arrow Function: let evenNumbers = numbers.filter(number =\u003e number % 2 === 0); console.log(evenNumbers); // [2, 4] 5. Phương Thức reduce() Phương thức reduce() cho phép bạn tính toán và trả về một giá trị duy nhất từ tất cả các phần tử trong mảng, thông qua một hàm xử lý.\nCách sử dụng: let numbers = [1, 2, 3, 4, 5]; let sum = numbers.reduce(function(total, number) { return total + number; }, 0); console.log(sum); // 15 reduce() nhận hai tham số: hàm callback (với tham số là accumulator và currentValue) và một giá trị khởi tạo cho accumulator. Giá trị trả về là một giá trị duy nhất (ví dụ, tổng, trung bình, v.v.). Sử dụng với Arrow Function: let sum = numbers.reduce((total, number) =\u003e total + number, 0); console.log(sum); // 15 6. Phương Thức find() Phương thức find() trả về phần tử đầu tiên trong mảng thỏa mãn điều kiện tìm kiếm.\nCách sử dụng: let numbers = [1, 2, 3, 4, 5]; let firstEven = numbers.find(function(number) { return number % 2 === 0; }); console.log(firstEven); // 2 find() chỉ trả về phần tử đầu tiên thỏa mãn điều kiện, hoặc undefined nếu không tìm thấy phần tử nào. 7. Phương Thức every() và some() every(): Kiểm tra nếu tất cả các phần tử trong mảng thỏa mãn một điều kiện. let numbers = [1, 2, 3, 4, 5]; let allPositive = numbers.every(number =\u003e number \u003e 0); console.log(allPositive); // true some(): Kiểm tra nếu ít nhất một phần tử trong mảng thỏa mãn điều kiện. let numbers = [1, 2, 3, 4, 5]; let hasNegative = numbers.some(number =\u003e number \u003c 0); console.log(hasNegative); // false 8. Phương Thức for...of Phương thức for...of là một cú pháp mới trong JavaScript cho phép lặp qua các phần tử của mảng mà không cần sử dụng chỉ số.\nCách sử dụng: let numbers = [1, 2, 3, 4, 5]; for (let number of numbers) { console.log(number); } for...of dễ đọc và sử dụng khi chỉ cần truy cập phần tử, không cần chỉ số của phần tử. ","description":"Hướng dẫn cách sử dụng các phương thức lặp qua mảng trong JavaScript, từ các phương thức đơn giản đến các phương thức mạnh mẽ như `forEach()`, `map()`, `filter()`, và `reduce()`.","tags":["javascript","arrays","iteration","blog"],"title":"JavaScript Array Iteration","uri":"/post/2020/javascript-array-iteration/"},{"content":"1. Giới Thiệu về JavaScript Array Methods Mảng trong JavaScript là một kiểu dữ liệu dùng để lưu trữ một tập hợp các giá trị có thể có cùng hoặc khác kiểu dữ liệu. JavaScript cung cấp rất nhiều phương thức hữu ích để thao tác với mảng. Dưới đây là một số phương thức phổ biến khi làm việc với mảng trong JavaScript.\n2. Các Phương Thức Cơ Bản của Mảng 1. push() - Thêm phần tử vào cuối mảng Phương thức push() thêm một hoặc nhiều phần tử vào cuối mảng và trả về độ dài mới của mảng.\nlet fruits = [\"apple\", \"banana\"]; fruits.push(\"orange\"); console.log(fruits); // [\"apple\", \"banana\", \"orange\"] 2. pop() - Loại bỏ phần tử cuối cùng của mảng Phương thức pop() loại bỏ phần tử cuối cùng của mảng và trả về phần tử đó.\nlet fruits = [\"apple\", \"banana\", \"orange\"]; let removed = fruits.pop(); console.log(fruits); // [\"apple\", \"banana\"] console.log(removed); // \"orange\" 3. shift() - Loại bỏ phần tử đầu tiên của mảng Phương thức shift() loại bỏ phần tử đầu tiên của mảng và trả về phần tử đó.\nlet fruits = [\"apple\", \"banana\", \"orange\"]; let removed = fruits.shift(); console.log(fruits); // [\"banana\", \"orange\"] console.log(removed); // \"apple\" 4. unshift() - Thêm phần tử vào đầu mảng Phương thức unshift() thêm một hoặc nhiều phần tử vào đầu mảng và trả về độ dài mới của mảng.\nlet fruits = [\"banana\", \"orange\"]; fruits.unshift(\"apple\"); console.log(fruits); // [\"apple\", \"banana\", \"orange\"] 5. concat() - Kết hợp các mảng Phương thức concat() dùng để kết hợp hai hoặc nhiều mảng lại với nhau và trả về một mảng mới.\nlet fruits = [\"apple\", \"banana\"]; let moreFruits = [\"orange\", \"grape\"]; let allFruits = fruits.concat(moreFruits); console.log(allFruits); // [\"apple\", \"banana\", \"orange\", \"grape\"] 6. join() - Kết hợp các phần tử trong mảng thành một chuỗi Phương thức join() nối tất cả các phần tử trong mảng thành một chuỗi, phân tách bằng dấu phân cách tùy chọn.\nlet fruits = [\"apple\", \"banana\", \"orange\"]; let result = fruits.join(\", \"); console.log(result); // \"apple, banana, orange\" 7. slice() - Lấy một phần mảng Phương thức slice() trả về một bản sao của mảng con trong mảng ban đầu từ chỉ số start đến chỉ số end (không bao gồm phần tử tại chỉ số end).\nlet fruits = [\"apple\", \"banana\", \"orange\", \"grape\"]; let slicedFruits = fruits.slice(1, 3); console.log(slicedFruits); // [\"banana\", \"orange\"] 8. splice() - Thêm hoặc xóa phần tử trong mảng Phương thức splice() cho phép bạn thêm hoặc xóa phần tử tại vị trí cụ thể trong mảng.\nlet fruits = [\"apple\", \"banana\", \"orange\"]; fruits.splice(1, 1, \"grape\", \"pear\"); console.log(fruits); // [\"apple\", \"grape\", \"pear\", \"orange\"] Tham số thứ nhất là chỉ số bắt đầu, tham số thứ hai là số phần tử cần xóa, và các tham số còn lại là các phần tử mới sẽ được thêm vào.\n9. forEach() - Duyệt qua tất cả các phần tử trong mảng Phương thức forEach() thực hiện một hàm callback cho mỗi phần tử trong mảng.\nlet fruits = [\"apple\", \"banana\", \"orange\"]; fruits.forEach(function(fruit) { console.log(fruit); }); 10. map() - Tạo mảng mới với các phần tử được chuyển đổi Phương thức map() tạo một mảng mới với các phần tử đã được chuyển đổi từ mảng ban đầu theo một hàm callback.\nlet numbers = [1, 2, 3]; let squares = numbers.map(function(number) { return number * number; }); console.log(squares); // [1, 4, 9] 11. filter() - Lọc mảng dựa trên điều kiện Phương thức filter() tạo một mảng mới chỉ chứa các phần tử thỏa mãn điều kiện được cung cấp trong hàm callback.\nlet numbers = [1, 2, 3, 4, 5]; let evenNumbers = numbers.filter(function(number) { return number % 2 === 0; }); console.log(evenNumbers); // [2, 4] 12. reduce() - Lấy giá trị duy nhất từ mảng Phương thức reduce() áp dụng một hàm callback cho mỗi phần tử trong mảng (từ trái sang phải) để tạo ra một giá trị duy nhất.\nlet numbers = [1, 2, 3, 4]; let sum = numbers.reduce(function(accumulator, currentValue) { return accumulator + currentValue; }, 0); console.log(sum); // 10 13. find() - Tìm phần tử đầu tiên thỏa mãn điều kiện Phương thức find() trả về phần tử đầu tiên trong mảng thỏa mãn điều kiện được xác định trong hàm callback.\nlet numbers = [1, 2, 3, 4, 5]; let found = numbers.find(function(number) { return number \u003e 3; }); console.log(found); // 4 ","description":"Tìm hiểu các phương thức cơ bản và phổ biến khi làm việc với mảng trong JavaScript. Các phương thức này giúp bạn thao tác và quản lý mảng dễ dàng hơn.","tags":["javascript","arrays","methods","blog"],"title":"JavaScript Array Methods","uri":"/post/2020/javascript-array-methods/"},{"content":"1. Giới Thiệu về Tìm Kiếm Mảng trong JavaScript Tìm kiếm mảng là một thao tác quan trọng khi làm việc với dữ liệu trong JavaScript. Để tìm kiếm phần tử trong mảng, JavaScript cung cấp một số phương thức hữu ích như indexOf(), includes(), find(), và findIndex(). Mỗi phương thức này có các tính năng và cách sử dụng khác nhau.\n2. Phương Thức indexOf() Phương thức indexOf() dùng để tìm kiếm một phần tử trong mảng và trả về chỉ số (index) của phần tử đầu tiên được tìm thấy. Nếu phần tử không tồn tại trong mảng, phương thức sẽ trả về -1.\nCách sử dụng: let fruits = [\"apple\", \"banana\", \"orange\", \"grape\"]; let index = fruits.indexOf(\"banana\"); console.log(index); // 1 let notFound = fruits.indexOf(\"pear\"); console.log(notFound); // -1 Lưu ý:\nindexOf() so sánh các phần tử bằng cách sử dụng phép so sánh chặt chẽ (strict equality). 3. Phương Thức includes() Phương thức includes() kiểm tra xem một phần tử có tồn tại trong mảng hay không và trả về true hoặc false. Phương thức này không trả về chỉ số mà chỉ cho biết phần tử có nằm trong mảng hay không.\nCách sử dụng: let fruits = [\"apple\", \"banana\", \"orange\", \"grape\"]; let hasBanana = fruits.includes(\"banana\"); console.log(hasBanana); // true let hasPear = fruits.includes(\"pear\"); console.log(hasPear); // false Lưu ý:\nincludes() cũng sử dụng phép so sánh chặt chẽ (strict equality). 4. Phương Thức find() Phương thức find() dùng để tìm phần tử đầu tiên trong mảng thỏa mãn điều kiện mà bạn chỉ định. Phương thức này sẽ trả về phần tử đó nếu tìm thấy, hoặc undefined nếu không có phần tử nào thỏa mãn.\nCách sử dụng: let numbers = [5, 12, 8, 130, 44]; let firstEven = numbers.find(function(number) { return number % 2 === 0; }); console.log(firstEven); // 12 let notFound = numbers.find(function(number) { return number \u003e 200; }); console.log(notFound); // undefined Lưu ý:\nPhương thức find() dừng lại ngay khi tìm thấy phần tử thỏa mãn điều kiện. 5. Phương Thức findIndex() Phương thức findIndex() tương tự như find(), nhưng thay vì trả về phần tử, nó trả về chỉ số (index) của phần tử đầu tiên thỏa mãn điều kiện. Nếu không tìm thấy, nó sẽ trả về -1.\nCách sử dụng: let numbers = [5, 12, 8, 130, 44]; let indexEven = numbers.findIndex(function(number) { return number % 2 === 0; }); console.log(indexEven); // 1 let notFound = numbers.findIndex(function(number) { return number \u003e 200; }); console.log(notFound); // -1 Lưu ý:\nfindIndex() cũng chỉ tìm kiếm phần tử đầu tiên thỏa mãn điều kiện. 6. Phương Thức filter() Phương thức filter() không chỉ dừng lại khi tìm thấy phần tử đầu tiên mà nó sẽ trả về tất cả các phần tử trong mảng thỏa mãn điều kiện mà bạn chỉ định. Phương thức này trả về một mảng mới chứa các phần tử phù hợp.\nCách sử dụng: let numbers = [5, 12, 8, 130, 44]; let evenNumbers = numbers.filter(function(number) { return number % 2 === 0; }); console.log(evenNumbers); // [12, 8, 130, 44] Lưu ý:\nfilter() trả về một mảng mới, có thể rỗng nếu không có phần tử nào thỏa mãn. ","description":"Hướng dẫn cách sử dụng các phương thức tìm kiếm mảng trong JavaScript để tìm kiếm phần tử trong mảng.","tags":["javascript","arrays","search","blog"],"title":"JavaScript Array Search","uri":"/post/2020/javascript-array-search/"},{"content":"1. Giới Thiệu về Mảng trong JavaScript Mảng trong JavaScript là một kiểu dữ liệu đặc biệt dùng để lưu trữ một tập hợp các giá trị. Mảng có thể chứa các giá trị cùng kiểu hoặc khác kiểu, và có thể có kích thước thay đổi linh hoạt trong quá trình thực thi chương trình.\nJavaScript hỗ trợ một số phương thức hữu ích để làm việc với mảng, từ việc thêm, xóa phần tử đến việc duyệt qua các phần tử của mảng.\n2. Cách Khai Báo Mảng trong JavaScript Khai báo mảng rỗng let fruits = []; Khai báo mảng với các phần tử let fruits = [\"apple\", \"banana\", \"orange\"]; Khai báo mảng với các kiểu dữ liệu khác nhau let mixedArray = [1, \"apple\", true, null]; Khai báo mảng với nhiều mảng con let nestedArray = [[1, 2], [3, 4], [5, 6]]; 3. Truy Cập Các Phần Tử Trong Mảng Mảng trong JavaScript có chỉ số (index) bắt đầu từ 0, vì vậy phần tử đầu tiên có chỉ số 0, phần tử thứ hai có chỉ số 1, v.v.\nTruy cập phần tử của mảng let fruits = [\"apple\", \"banana\", \"orange\"]; console.log(fruits[0]); // \"apple\" console.log(fruits[1]); // \"banana\" Truy cập phần tử cuối cùng của mảng let fruits = [\"apple\", \"banana\", \"orange\"]; console.log(fruits[fruits.length - 1]); // \"orange\" 4. Các Phương Thức Thường Dùng với Mảng JavaScript cung cấp nhiều phương thức để thao tác với mảng. Dưới đây là một số phương thức phổ biến:\npush() - Thêm phần tử vào cuối mảng let fruits = [\"apple\", \"banana\"]; fruits.push(\"orange\"); console.log(fruits); // [\"apple\", \"banana\", \"orange\"] pop() - Loại bỏ phần tử cuối cùng của mảng let fruits = [\"apple\", \"banana\", \"orange\"]; fruits.pop(); console.log(fruits); // [\"apple\", \"banana\"] shift() - Loại bỏ phần tử đầu tiên của mảng let fruits = [\"apple\", \"banana\", \"orange\"]; fruits.shift(); console.log(fruits); // [\"banana\", \"orange\"] unshift() - Thêm phần tử vào đầu mảng let fruits = [\"banana\", \"orange\"]; fruits.unshift(\"apple\"); console.log(fruits); // [\"apple\", \"banana\", \"orange\"] concat() - Kết hợp nhiều mảng let fruits = [\"apple\", \"banana\"]; let moreFruits = [\"orange\", \"grape\"]; let allFruits = fruits.concat(moreFruits); console.log(allFruits); // [\"apple\", \"banana\", \"orange\", \"grape\"] join() - Kết hợp các phần tử trong mảng thành chuỗi let fruits = [\"apple\", \"banana\", \"orange\"]; let result = fruits.join(\", \"); console.log(result); // \"apple, banana, orange\" slice() - Lấy một phần mảng let fruits = [\"apple\", \"banana\", \"orange\", \"grape\"]; let slicedFruits = fruits.slice(1, 3); console.log(slicedFruits); // [\"banana\", \"orange\"] splice() - Thêm hoặc xóa phần tử trong mảng let fruits = [\"apple\", \"banana\", \"orange\"]; fruits.splice(1, 1, \"grape\", \"pear\"); console.log(fruits); // [\"apple\", \"grape\", \"pear\", \"orange\"] 5. Duyệt qua Mảng forEach() - Duyệt qua tất cả các phần tử trong mảng let fruits = [\"apple\", \"banana\", \"orange\"]; fruits.forEach(function(fruit) { console.log(fruit); }); map() - Tạo một mảng mới với các phần tử được chuyển đổi let numbers = [1, 2, 3]; let squares = numbers.map(function(number) { return number * number; }); console.log(squares); // [1, 4, 9] filter() - Lọc mảng theo điều kiện let numbers = [1, 2, 3, 4, 5]; let evenNumbers = numbers.filter(function(number) { return number % 2 === 0; }); console.log(evenNumbers); // [2, 4] reduce() - Tính toán giá trị duy nhất từ các phần tử của mảng let numbers = [1, 2, 3, 4]; let sum = numbers.reduce(function(accumulator, currentValue) { return accumulator + currentValue; }, 0); console.log(sum); // 10 6. Mảng và Độ Dài length - Độ dài của mảng let fruits = [\"apple\", \"banana\", \"orange\"]; console.log(fruits.length); // 3 sort() - Sắp xếp mảng let fruits = [\"banana\", \"apple\", \"orange\"]; fruits.sort(); console.log(fruits); // [\"apple\", \"banana\", \"orange\"] ","description":"Tìm hiểu về mảng trong JavaScript, cách khai báo, thao tác và các phương thức phổ biến khi làm việc với mảng.","tags":["javascript","arrays","blog"],"title":"JavaScript Arrays","uri":"/post/2020/javascript-arrays/"},{"content":"1. Giới Thiệu về JavaScript Date Objects Trong JavaScript, Date là một đối tượng tích hợp sẵn giúp bạn làm việc với ngày và giờ. Bạn có thể tạo và thao tác với các đối tượng Date để lấy thông tin về thời gian hiện tại, so sánh ngày tháng, cũng như chuyển đổi giữa các định dạng ngày giờ khác nhau.\nĐối tượng Date trong JavaScript được tạo ra để làm việc với thời gian và có thể đại diện cho một thời điểm trong quá khứ, hiện tại hoặc tương lai.\n2. Tạo Đối Tượng Date Để tạo một đối tượng Date, bạn có thể sử dụng cú pháp sau:\nlet currentDate = new Date(); // Tạo đối tượng Date với thời gian hiện tại console.log(currentDate); // Ví dụ: Thu Dec 31 2023 12:00:00 GMT+0000 (Coordinated Universal Time) Ngoài ra, bạn có thể tạo Date từ một chuỗi ngày giờ hoặc một giá trị thời gian (timestamp):\nlet specificDate = new Date(\"2023-12-31\"); // Tạo Date từ chuỗi console.log(specificDate); // Sun Dec 31 2023 00:00:00 GMT+0000 (Coordinated Universal Time) Hoặc từ timestamp (số mili giây kể từ 01/01/1970):\nlet timestampDate = new Date(1609459200000); // Tạo Date từ timestamp console.log(timestampDate); // Fri Jan 01 2021 00:00:00 GMT+0000 (Coordinated Universal Time) 3. Phương Thức Của Đối Tượng Date Dưới đây là một số phương thức phổ biến của đối tượng Date:\ngetFullYear(): Trả về năm của đối tượng Date. let date = new Date(); console.log(date.getFullYear()); // Ví dụ: 2023 getMonth(): Trả về tháng của đối tượng Date, với tháng bắt đầu từ 0 (Tháng 0 là tháng 1). let date = new Date(); console.log(date.getMonth()); // Ví dụ: 11 (Tháng 12) getDate(): Trả về ngày trong tháng của đối tượng Date. let date = new Date(); console.log(date.getDate()); // Ví dụ: 31 getHours(): Trả về giờ của đối tượng Date (0-23). let date = new Date(); console.log(date.getHours()); // Ví dụ: 12 getMinutes(): Trả về phút của đối tượng Date (0-59). let date = new Date(); console.log(date.getMinutes()); // Ví dụ: 30 getSeconds(): Trả về giây của đối tượng Date (0-59). let date = new Date(); console.log(date.getSeconds()); // Ví dụ: 45 getMilliseconds(): Trả về mili giây của đối tượng Date (0-999). let date = new Date(); console.log(date.getMilliseconds()); // Ví dụ: 500 getDay(): Trả về ngày trong tuần (0 là Chủ nhật, 6 là Thứ bảy). let date = new Date(); console.log(date.getDay()); // Ví dụ: 0 (Chủ nhật) getTime(): Trả về số mili giây kể từ 01/01/1970. let date = new Date(); console.log(date.getTime()); // Ví dụ: 1636345790000 4. Các Phương Thức Cập Nhật Ngày Giờ Đối tượng Date cũng cung cấp các phương thức để cập nhật ngày giờ của đối tượng:\nsetFullYear(year): Cập nhật năm cho đối tượng Date. let date = new Date(); date.setFullYear(2025); console.log(date); // Ví dụ: Thu Dec 31 2025 12:00:00 GMT+0000 (Coordinated Universal Time) setMonth(month): Cập nhật tháng cho đối tượng Date. let date = new Date(); date.setMonth(6); // Tháng 7 (nhớ là tháng bắt đầu từ 0) console.log(date); // Ví dụ: Thu Jul 31 2023 12:00:00 GMT+0000 (Coordinated Universal Time) setDate(date): Cập nhật ngày cho đối tượng Date. let date = new Date(); date.setDate(15); console.log(date); // Ví dụ: Wed Dec 15 2023 12:00:00 GMT+0000 (Coordinated Universal Time) setHours(hours): Cập nhật giờ cho đối tượng Date. let date = new Date(); date.setHours(18); console.log(date); // Ví dụ: Thu Dec 31 2023 18:00:00 GMT+0000 (Coordinated Universal Time) setMinutes(minutes): Cập nhật phút cho đối tượng Date. let date = new Date(); date.setMinutes(45); console.log(date); // Ví dụ: Thu Dec 31 2023 12:45:00 GMT+0000 (Coordinated Universal Time) 5. Phương Thức toLocaleString() Phương thức toLocaleString() giúp bạn định dạng ngày giờ theo múi giờ và ngôn ngữ cụ thể.\nlet date = new Date(); console.log(date.toLocaleString('en-US')); // Ví dụ: 12/31/2023, 12:00:00 PM console.log(date.toLocaleString('en-GB')); // Ví dụ: 31/12/2023, 12:00:00 ","description":"Hướng dẫn sử dụng đối tượng Date trong JavaScript để làm việc với ngày giờ, bao gồm các phương thức và cách thức tạo đối tượng Date.","tags":["javascript","date","objects","blog"],"title":"JavaScript Date Objects","uri":"/post/2020/javascript-date-objects/"},{"content":"1. Giới Thiệu về Sắp Xếp Mảng trong JavaScript Sắp xếp mảng là một thao tác phổ biến trong lập trình. JavaScript cung cấp một số phương thức để sắp xếp mảng như sort(), và bạn có thể tùy chỉnh các phương thức này để sắp xếp các mảng theo nhu cầu của mình, từ số học đến chuỗi hay các đối tượng phức tạp.\n2. Phương Thức sort() Phương thức sort() được sử dụng để sắp xếp các phần tử trong mảng. Mặc định, sort() sắp xếp mảng theo thứ tự bảng chữ cái, đối với các phần tử chuỗi hoặc sắp xếp theo giá trị Unicode.\nCách sử dụng cơ bản: let fruits = [\"banana\", \"apple\", \"orange\", \"grape\"]; fruits.sort(); console.log(fruits); // [\"apple\", \"banana\", \"grape\", \"orange\"] 3. Sắp Xếp Số Khi bạn sắp xếp các mảng chứa các giá trị số, cần phải sử dụng một hàm so sánh, vì phương thức sort() mặc định không sắp xếp theo thứ tự số học mà lại sắp xếp theo thứ tự chuỗi (Unicode).\nCách sử dụng với hàm so sánh: let numbers = [5, 12, 8, 130, 44]; numbers.sort(function(a, b) { return a - b; // Sắp xếp theo thứ tự tăng dần }); console.log(numbers); // [5, 8, 12, 44, 130] Sắp xếp theo thứ tự giảm dần: numbers.sort(function(a, b) { return b - a; // Sắp xếp theo thứ tự giảm dần }); console.log(numbers); // [130, 44, 12, 8, 5] 4. Sắp Xếp Chuỗi Khi làm việc với các chuỗi trong mảng, phương thức sort() sẽ sắp xếp theo thứ tự bảng chữ cái mặc định, tuy nhiên, có thể bạn sẽ muốn kiểm soát cách thức so sánh.\nSắp xếp chuỗi theo thứ tự bảng chữ cái: let words = [\"banana\", \"apple\", \"grape\", \"orange\"]; words.sort(); console.log(words); // [\"apple\", \"banana\", \"grape\", \"orange\"] Sắp xếp chuỗi theo thứ tự ngược lại: words.sort(function(a, b) { return b.localeCompare(a); // Sắp xếp ngược lại theo bảng chữ cái }); console.log(words); // [\"orange\", \"grape\", \"banana\", \"apple\"] 5. Sắp Xếp Mảng Các Đối Tượng Khi làm việc với các đối tượng trong mảng, bạn có thể sử dụng phương thức sort() để sắp xếp các đối tượng theo các thuộc tính của chúng.\nVí dụ: Sắp xếp đối tượng theo thuộc tính: let people = [ { name: \"John\", age: 30 }, { name: \"Alice\", age: 25 }, { name: \"Bob\", age: 35 } ]; people.sort(function(a, b) { return a.age - b.age; // Sắp xếp theo độ tuổi (thứ tự tăng dần) }); console.log(people); // [ // { name: \"Alice\", age: 25 }, // { name: \"John\", age: 30 }, // { name: \"Bob\", age: 35 } // ] Sắp xếp theo tên (theo thứ tự bảng chữ cái): people.sort(function(a, b) { return a.name.localeCompare(b.name); // Sắp xếp theo tên }); console.log(people); // [ // { name: \"Alice\", age: 25 }, // { name: \"Bob\", age: 35 }, // { name: \"John\", age: 30 } // ] 6. Sắp Xếp Ngẫu Nhiên Nếu bạn muốn sắp xếp một mảng theo thứ tự ngẫu nhiên, bạn có thể sử dụng phương thức sort() kết hợp với một hàm so sánh trả về giá trị ngẫu nhiên.\nVí dụ: let items = [1, 2, 3, 4, 5]; items.sort(function() { return Math.random() - 0.5; // Trả về giá trị ngẫu nhiên để sắp xếp ngẫu nhiên }); console.log(items); // [3, 5, 2, 4, 1] (kết quả có thể thay đổi mỗi lần chạy) ","description":"Hướng dẫn cách sử dụng các phương thức sắp xếp mảng trong JavaScript, bao gồm các kỹ thuật sắp xếp số, chuỗi và các đối tượng phức tạp.","tags":["javascript","arrays","sorting","blog"],"title":"JavaScript Sorting Arrays","uri":"/post/2020/javascript-sorting-arrays/"},{"content":"1. Giới Thiệu về JavaScript String Methods JavaScript cung cấp rất nhiều phương thức để thao tác với chuỗi. Các phương thức này cho phép bạn xử lý và thay đổi chuỗi, từ việc tìm kiếm, thay thế, tách chuỗi đến việc thay đổi định dạng chuỗi. Dưới đây là một số phương thức chuỗi cơ bản và phổ biến trong JavaScript.\n2. Các Phương Thức Chuỗi Cơ Bản 1. length - Độ dài của chuỗi Trả về số lượng ký tự trong chuỗi.\nlet str = \"Hello, World!\"; console.log(str.length); // 13 2. indexOf() - Tìm chỉ số của ký tự trong chuỗi Trả về chỉ số đầu tiên của chuỗi con trong chuỗi (hoặc -1 nếu không tìm thấy).\nlet str = \"JavaScript is awesome!\"; console.log(str.indexOf(\"is\")); // 10 3. lastIndexOf() - Tìm chỉ số của ký tự trong chuỗi từ cuối Tìm chỉ số của chuỗi con bắt đầu từ cuối chuỗi.\nlet str = \"JavaScript is awesome, JavaScript!\"; console.log(str.lastIndexOf(\"JavaScript\")); // 25 4. slice() - Cắt chuỗi Cắt chuỗi từ vị trí bắt đầu đến vị trí kết thúc (không bao gồm vị trí kết thúc).\nlet str = \"JavaScript is fun!\"; console.log(str.slice(0, 10)); // \"JavaScript\" 5. substring() - Tạo chuỗi con từ vị trí bắt đầu Tạo chuỗi con từ vị trí bắt đầu đến vị trí kết thúc.\nlet str = \"JavaScript is fun!\"; console.log(str.substring(0, 10)); // \"JavaScript\" 6. substr() - Tạo chuỗi con từ vị trí bắt đầu với độ dài xác định Tạo chuỗi con từ vị trí bắt đầu với một độ dài xác định.\nlet str = \"JavaScript is fun!\"; console.log(str.substr(0, 10)); // \"JavaScript\" 3. Các Phương Thức Định Dạng Chuỗi 1. toLowerCase() - Chuyển chuỗi thành chữ thường Chuyển tất cả các ký tự trong chuỗi thành chữ thường.\nlet str = \"HELLO, WORLD!\"; console.log(str.toLowerCase()); // \"hello, world!\" 2. toUpperCase() - Chuyển chuỗi thành chữ hoa Chuyển tất cả các ký tự trong chuỗi thành chữ hoa.\nlet str = \"hello, world!\"; console.log(str.toUpperCase()); // \"HELLO, WORLD!\" 3. trim() - Loại bỏ khoảng trắng ở đầu và cuối chuỗi Loại bỏ tất cả khoảng trắng (spaces, tabs, newlines) ở đầu và cuối chuỗi.\nlet str = \" Hello, World! \"; console.log(str.trim()); // \"Hello, World!\" 4. Các Phương Thức Tìm Kiếm Chuỗi 1. includes() - Kiểm tra chuỗi có chứa một đoạn văn bản Kiểm tra xem một chuỗi có chứa một đoạn chuỗi con không.\nlet str = \"JavaScript is awesome!\"; console.log(str.includes(\"JavaScript\")); // true 2. startsWith() - Kiểm tra chuỗi bắt đầu bằng một đoạn văn bản Kiểm tra xem chuỗi có bắt đầu bằng một đoạn chuỗi con không.\nlet str = \"JavaScript is awesome!\"; console.log(str.startsWith(\"Java\")); // true 3. endsWith() - Kiểm tra chuỗi kết thúc bằng một đoạn văn bản Kiểm tra xem chuỗi có kết thúc bằng một đoạn chuỗi con không.\nlet str = \"JavaScript is awesome!\"; console.log(str.endsWith(\"awesome!\")); // true 5. Các Phương Thức Thao Tác Với Các Ký Tự Trong Chuỗi 1. charAt() - Lấy ký tự tại một vị trí cụ thể Trả về ký tự tại chỉ số xác định trong chuỗi.\nlet str = \"JavaScript\"; console.log(str.charAt(4)); // \"S\" 2. charCodeAt() - Lấy mã ASCII của ký tự tại vị trí cụ thể Trả về mã ASCII của ký tự tại vị trí xác định.\nlet str = \"JavaScript\"; console.log(str.charCodeAt(4)); // 83 3. codePointAt() - Lấy mã điểm mã Unicode của ký tự tại vị trí cụ thể Trả về mã điểm Unicode của ký tự tại vị trí xác định.\nlet str = \"JavaScript\"; console.log(str.codePointAt(4)); // 83 4. split() - Tách chuỗi thành mảng Chia chuỗi thành mảng dựa trên ký tự phân cách.\nlet str = \"apple,banana,cherry\"; let arr = str.split(\",\"); console.log(arr); // [\"apple\", \"banana\", \"cherry\"] 5. replace() - Thay thế chuỗi con bằng chuỗi mới Thay thế một phần của chuỗi bằng chuỗi khác.\nlet str = \"Hello, World!\"; console.log(str.replace(\"World\", \"JavaScript\")); // \"Hello, JavaScript!\" 6. Các Phương Thức Tạo Chuỗi Mới 1. concat() - Nối hai hoặc nhiều chuỗi lại với nhau Nối hai hoặc nhiều chuỗi lại thành một chuỗi mới.\nlet str1 = \"Hello\"; let str2 = \"World\"; console.log(str1.concat(\", \", str2, \"!\")); // \"Hello, World!\" 2. repeat() - Lặp lại chuỗi một số lần Tạo ra một chuỗi mới bằng cách lặp lại chuỗi ban đầu một số lần.\nlet str = \"Hello!\"; console.log(str.repeat(3)); // \"Hello!Hello!Hello!\" 3. padStart() - Thêm ký tự vào đầu chuỗi Thêm ký tự vào đầu chuỗi cho đến khi chuỗi đạt độ dài yêu cầu.\nlet str = \"5\"; console.log(str.padStart(3, \"0\")); // \"005\" 4. padEnd() - Thêm ký tự vào cuối chuỗi Thêm ký tự vào cuối chuỗi cho đến khi chuỗi đạt độ dài yêu cầu.\nlet str = \"5\"; console.log(str.padEnd(3, \"0\")); // \"500\" ","description":"Khám phá các phương thức chuỗi trong JavaScript, giúp bạn thao tác và xử lý các chuỗi một cách linh hoạt và hiệu quả.","tags":["javascript","strings","programming","blog"],"title":"JavaScript String Methods","uri":"/post/2020/javascript-string-methods/"},{"content":"1. Giới Thiệu về JavaScript String Search Trong JavaScript, việc tìm kiếm chuỗi con trong một chuỗi lớn là một trong những thao tác cơ bản và phổ biến. JavaScript cung cấp một số phương thức để thực hiện công việc này, từ việc kiểm tra sự tồn tại của chuỗi con cho đến việc tìm vị trí của nó. Dưới đây là các phương thức tìm kiếm chuỗi trong JavaScript.\n2. Các Phương Thức Tìm Kiếm Chuỗi 1. indexOf() - Tìm vị trí đầu tiên của chuỗi con Phương thức indexOf() trả về chỉ số (index) đầu tiên của chuỗi con trong chuỗi, hoặc trả về -1 nếu không tìm thấy chuỗi con.\nlet str = \"JavaScript is awesome!\"; let result = str.indexOf(\"is\"); console.log(result); // 10 Nếu chuỗi con tồn tại, phương thức trả về chỉ số của ký tự đầu tiên của chuỗi con. Nếu chuỗi con không tồn tại, trả về -1. 2. lastIndexOf() - Tìm vị trí cuối cùng của chuỗi con Phương thức lastIndexOf() tìm vị trí của chuỗi con từ cuối chuỗi ban đầu và trả về chỉ số của chuỗi con cuối cùng tìm thấy.\nlet str = \"JavaScript is fun, JavaScript is awesome!\"; let result = str.lastIndexOf(\"JavaScript\"); console.log(result); // 31 Nếu không tìm thấy chuỗi con, phương thức trả về -1. 3. includes() - Kiểm tra chuỗi có chứa chuỗi con không Phương thức includes() kiểm tra xem chuỗi có chứa chuỗi con hay không và trả về true nếu có, false nếu không.\nlet str = \"JavaScript is awesome!\"; let result = str.includes(\"awesome\"); console.log(result); // true Phương thức này không phân biệt chữ hoa và chữ thường (case-sensitive). 4. startsWith() - Kiểm tra chuỗi bắt đầu bằng chuỗi con Phương thức startsWith() kiểm tra xem chuỗi có bắt đầu bằng chuỗi con xác định không.\nlet str = \"JavaScript is awesome!\"; let result = str.startsWith(\"JavaScript\"); console.log(result); // true Trả về true nếu chuỗi bắt đầu bằng chuỗi con, ngược lại trả về false. 5. endsWith() - Kiểm tra chuỗi kết thúc bằng chuỗi con Phương thức endsWith() kiểm tra xem chuỗi có kết thúc bằng chuỗi con xác định không.\nlet str = \"JavaScript is awesome!\"; let result = str.endsWith(\"awesome!\"); console.log(result); // true Trả về true nếu chuỗi kết thúc bằng chuỗi con, ngược lại trả về false. 6. search() - Tìm chuỗi con sử dụng biểu thức chính quy Phương thức search() tìm kiếm chuỗi con trong chuỗi lớn bằng cách sử dụng biểu thức chính quy và trả về chỉ số đầu tiên của chuỗi con tìm thấy.\nlet str = \"JavaScript is awesome!\"; let result = str.search(\"awesome\"); console.log(result); // 15 Nếu không tìm thấy chuỗi con, phương thức trả về -1. 3. Sử Dụng Biểu Thức Chính Quy với search() Phương thức search() rất hữu ích khi bạn cần tìm kiếm chuỗi con theo mẫu phức tạp, sử dụng biểu thức chính quy. Đây là ví dụ:\nlet str = \"JavaScript is awesome, isn't it?\"; let result = str.search(/[A-Za-z]+/); // Tìm kiếm từ đầu tiên là chữ cái console.log(result); // 0 Biểu thức chính quy [A-Za-z]+ tìm kiếm tất cả các ký tự chữ cái đầu tiên trong chuỗi. ","description":"Tìm hiểu các phương thức tìm kiếm chuỗi trong JavaScript, giúp bạn kiểm tra sự tồn tại của chuỗi con trong một chuỗi lớn.","tags":["javascript","strings","search","blog"],"title":"JavaScript String Search","uri":"/post/2020/javascript-string-search/"},{"content":"1. Giới Thiệu về JavaScript Strings Trong JavaScript, String là một kiểu dữ liệu đại diện cho một chuỗi các ký tự. Chuỗi có thể bao gồm chữ cái, số, hoặc các ký tự đặc biệt. Chúng được sử dụng để lưu trữ và thao tác với văn bản.\n2. Cách Khai Báo và Khởi Tạo Chuỗi Bạn có thể khai báo chuỗi trong JavaScript bằng cách sử dụng dấu ngoặc kép (\"\"), dấu nháy đơn (''), hoặc dấu nháy kép với backticks (````) cho các chuỗi đa dòng.\nVí dụ: let str1 = \"Hello, World!\"; let str2 = 'JavaScript is fun!'; let str3 = `This is a string with a line break and this is on a new line.`; Dấu ngoặc kép (\"\") và dấu nháy đơn (’’) hoạt động tương tự nhau.\nDấu backticks (````) cho phép bạn tạo chuỗi đa dòng và sử dụng template literals để chèn các biến vào trong chuỗi.\n3. Các Phương Thức Thường Dùng với Chuỗi JavaScript cung cấp một số phương thức để thao tác với chuỗi. Dưới đây là một số phương thức phổ biến:\nlength - Độ dài của chuỗi\nTrả về số lượng ký tự trong chuỗi.\nlet str = \"Hello, World!\"; console.log(str.length); // 13 indexOf() - Tìm chỉ số của ký tự đầu tiên\nTrả về chỉ số của ký tự đầu tiên trong chuỗi (hoặc -1 nếu không tìm thấy).\nlet str = \"JavaScript is awesome!\"; console.log(str.indexOf(\"is\")); // 10 toLowerCase() - Chuyển chuỗi thành chữ thường\nChuyển tất cả các ký tự trong chuỗi thành chữ thường.\nlet str = \"HELLO, WORLD!\"; console.log(str.toLowerCase()); // \"hello, world!\" toUpperCase() - Chuyển chuỗi thành chữ hoa\nChuyển tất cả các ký tự trong chuỗi thành chữ hoa.\nlet str = \"hello, world!\"; console.log(str.toUpperCase()); // \"HELLO, WORLD!\" trim() - Loại bỏ khoảng trắng ở đầu và cuối chuỗi\nLoại bỏ tất cả khoảng trắng (spaces, tabs, newlines) ở đầu và cuối chuỗi.\nlet str = \" Hello, World! \"; console.log(str.trim()); // \"Hello, World!\" slice() - Cắt một phần của chuỗi\nTrả về một phần chuỗi từ vị trí bắt đầu (inclusive) đến vị trí kết thúc (exclusive).\nlet str = \"JavaScript is fun!\"; console.log(str.slice(0, 10)); // \"JavaScript\" replace() - Thay thế một phần chuỗi\nThay thế một phần của chuỗi bằng chuỗi khác.\nlet str = \"Hello, World!\"; console.log(str.replace(\"World\", \"JavaScript\")); // \"Hello, JavaScript!\" split() - Chia chuỗi thành mảng\nChia chuỗi thành mảng dựa trên ký tự phân cách.\nlet str = \"apple,banana,cherry\"; let arr = str.split(\",\"); console.log(arr); // [\"apple\", \"banana\", \"cherry\"] charAt() - Lấy ký tự tại một vị trí cụ thể\nTrả về ký tự tại chỉ số xác định.\nlet str = \"JavaScript\"; console.log(str.charAt(4)); // \"S\" 4. Template Literals (Chuỗi Mẫu) Template literals là cách mới để tạo chuỗi trong JavaScript, cho phép bạn chèn các biến và biểu thức vào trong chuỗi dễ dàng hơn.\nCú pháp:\nlet name = \"John\"; let age = 25; let sentence = `My name is ${name} and I am ${age} years old.`; console.log(sentence); // \"My name is John and I am 25 years old.\" ${variable} cho phép bạn chèn giá trị của một biến hoặc biểu thức vào trong chuỗi.\n5. Các Phương Thức Tìm Kiếm Chuỗi includes() - Kiểm tra chuỗi có chứa một đoạn văn bản\nKiểm tra xem một chuỗi có chứa một đoạn chuỗi con không.\nlet str = \"JavaScript is awesome!\"; console.log(str.includes(\"JavaScript\")); // true startsWith() - Kiểm tra chuỗi bắt đầu bằng một đoạn văn bản\nKiểm tra xem chuỗi có bắt đầu bằng một đoạn chuỗi con không.\nlet str = \"JavaScript is awesome!\"; console.log(str.startsWith(\"Java\")); // true endsWith() - Kiểm tra chuỗi kết thúc bằng một đoạn văn bản\nKiểm tra xem chuỗi có kết thúc bằng một đoạn chuỗi con không.\nlet str = \"JavaScript is awesome!\"; console.log(str.endsWith(\"awesome!\")); // true ","description":"Khám phá cách sử dụng chuỗi trong JavaScript. Bài viết này sẽ giới thiệu về cú pháp và các phương thức thường dùng để làm việc với chuỗi trong JavaScript.","tags":["javascript","strings","programming","blog"],"title":"JavaScript Strings","uri":"/post/2020/javascript-strings/"},{"content":"1. Giới Thiệu về new Date() Constructor Trong JavaScript, Date là một đối tượng tích hợp sẵn dùng để làm việc với ngày và giờ. Bạn có thể sử dụng new Date() constructor để tạo một đối tượng Date mới. Khi gọi new Date(), bạn có thể tạo ra đối tượng Date theo nhiều cách khác nhau, tùy vào đối số được truyền vào.\n2. Tạo Đối Tượng Date Mới Không truyền đối số: Khi bạn không truyền bất kỳ đối số nào vào new Date(), nó sẽ tạo ra một đối tượng Date đại diện cho thời gian hiện tại (theo thời gian của hệ thống).\nlet currentDate = new Date(); console.log(currentDate); // Ví dụ: Thu Dec 31 2023 12:00:00 GMT+0000 (Coordinated Universal Time) Truyền chuỗi ngày giờ: Bạn có thể tạo đối tượng Date từ một chuỗi ngày giờ hợp lệ. JavaScript sẽ phân tích chuỗi ngày giờ và trả về một đối tượng Date tương ứng.\nlet dateFromString = new Date(\"2023-12-31T12:00:00\"); console.log(dateFromString); // Ví dụ: Sun Dec 31 2023 12:00:00 GMT+0000 (Coordinated Universal Time) Lưu ý rằng chuỗi ngày giờ phải tuân theo định dạng chuẩn ISO 8601 để đảm bảo tính chính xác khi phân tích.\nTruyền giá trị thời gian (timestamp): Bạn cũng có thể truyền một giá trị timestamp (số mili giây kể từ 01/01/1970) vào new Date(). Điều này giúp bạn tạo đối tượng Date từ một thời điểm xác định trong quá khứ hoặc tương lai.\nlet dateFromTimestamp = new Date(1609459200000); // Timestamp cho 01/01/2021 console.log(dateFromTimestamp); // Fri Jan 01 2021 00:00:00 GMT+0000 (Coordinated Universal Time) Truyền ngày, tháng, năm, giờ, phút, giây: Bạn cũng có thể truyền từng thành phần ngày, tháng, năm, giờ, phút và giây vào new Date().\nlet specificDate = new Date(2023, 11, 31, 12, 0, 0); // Lưu ý tháng bắt đầu từ 0 console.log(specificDate); // Ví dụ: Sun Dec 31 2023 12:00:00 GMT+0000 (Coordinated Universal Time) Trong đó:\n2023 là năm. 11 là tháng (0 là tháng 1, 1 là tháng 2,…). 31 là ngày trong tháng. 12 là giờ (theo định dạng 24 giờ). 0 là phút. 0 là giây. 3. Phương Thức và Cách Sử Dụng Đối Tượng Date Sau khi tạo đối tượng Date với new Date(), bạn có thể sử dụng các phương thức của đối tượng Date để thao tác với thời gian.\nLấy thông tin từ đối tượng Date: getFullYear(): Trả về năm của đối tượng Date. let date = new Date(); console.log(date.getFullYear()); // Ví dụ: 2023 getMonth(): Trả về tháng (0-11). let date = new Date(); console.log(date.getMonth()); // Ví dụ: 11 (Tháng 12) getDate(): Trả về ngày trong tháng. let date = new Date(); console.log(date.getDate()); // Ví dụ: 31 getDay(): Trả về ngày trong tuần (0 là Chủ nhật, 6 là Thứ bảy). let date = new Date(); console.log(date.getDay()); // Ví dụ: 0 (Chủ nhật) getHours(): Trả về giờ (0-23). let date = new Date(); console.log(date.getHours()); // Ví dụ: 12 getMinutes(): Trả về phút (0-59). let date = new Date(); console.log(date.getMinutes()); // Ví dụ: 30 getSeconds(): Trả về giây (0-59). let date = new Date(); console.log(date.getSeconds()); // Ví dụ: 45 Cập nhật thông tin trong đối tượng Date: setFullYear(year): Cập nhật năm. let date = new Date(); date.setFullYear(2025); console.log(date); // Ví dụ: Thu Dec 31 2025 12:00:00 GMT+0000 (Coordinated Universal Time) setMonth(month): Cập nhật tháng. let date = new Date(); date.setMonth(6); // Tháng 7 (tháng bắt đầu từ 0) console.log(date); // Ví dụ: Thu Jul 31 2023 12:00:00 GMT+0000 (Coordinated Universal Time) setDate(date): Cập nhật ngày trong tháng. let date = new Date(); date.setDate(15); console.log(date); // Ví dụ: Wed Dec 15 2023 12:00:00 GMT+0000 (Coordinated Universal Time) ","description":"Hướng dẫn chi tiết về cách sử dụng `new Date()` constructor trong JavaScript để tạo đối tượng `Date` và làm việc với ngày giờ.","tags":["javascript","date","constructor","blog"],"title":"The new Date() Constructor","uri":"/post/2020/the-new-date-constructor/"},{"content":"1. JavaScript const: Khái Niệm Cơ Bản const là một từ khóa trong JavaScript được dùng để khai báo các biến mà giá trị của chúng không thể thay đổi sau khi đã được gán. Được giới thiệu trong ES6, const giúp tạo ra các biến hằng (constant) trong mã của bạn, giúp bảo vệ giá trị của biến khỏi sự thay đổi không mong muốn.\nKhi bạn khai báo một biến với const, bạn không thể thay đổi giá trị của nó sau khi đã gán.\n2. Cách Khai Báo và Sử Dụng const Để khai báo một biến bằng const, bạn sử dụng cú pháp sau:\nconst x = 10; // Khai báo biến hằng Không thể thay đổi giá trị của biến sau khi đã được gán:\nconst x = 10; x = 20; // Lỗi: \"Assignment to constant variable.\" Lưu ý: Tuy nhiên, điều này không áp dụng với các đối tượng và mảng. Bạn có thể thay đổi các giá trị bên trong đối tượng hoặc mảng khai báo với const, nhưng không thể gán lại cả đối tượng hoặc mảng mới.\nVí dụ:\nconst obj = { name: \"John\" }; obj.name = \"Doe\"; // Điều này hợp lệ obj = {}; // Lỗi: \"Assignment to constant variable.\" 3. Khi Nào Sử Dụng const Sử dụng const khi bạn muốn khai báo một giá trị mà bạn không muốn thay đổi trong suốt vòng đời của chương trình, giúp bảo vệ giá trị của biến khỏi sự thay đổi ngẫu nhiên. Đây là lựa chọn lý tưởng khi bạn làm việc với các giá trị không đổi như:\nCác hằng số (ví dụ: số Pi). Các tham số không thay đổi trong hàm. Đối tượng hoặc mảng không thay đổi (dù các phần tử trong đó có thể thay đổi). Ví dụ:\nconst PI = 3.14159; // Hằng số không đổi const MAX_USERS = 100; // Hằng số giới hạn 4. Phạm Vi của const const có phạm vi khối (block scope), điều này có nghĩa là biến khai báo bằng const chỉ có thể truy cập trong khối mã (block) mà nó được khai báo, ví dụ: trong một vòng lặp hoặc một câu điều kiện.\nVí dụ:\nif (true) { const y = 50; console.log(y); // In ra 50 } console.log(y); // Lỗi: \"y is not defined\" 5. const và Mảng/Đối Tượng Dù giá trị của biến khai báo với const không thể thay đổi, nhưng nếu biến đó là một đối tượng hoặc mảng, bạn có thể thay đổi nội dung bên trong đối tượng/mảng đó.\nVí dụ với mảng:\nconst numbers = [1, 2, 3]; numbers.push(4); // Hợp lệ console.log(numbers); // In ra [1, 2, 3, 4] numbers = [5, 6, 7]; // Lỗi: \"Assignment to constant variable.\" Ví dụ với đối tượng:\nconst user = { name: \"Alice\", age: 25 }; user.age = 26; // Hợp lệ console.log(user); // In ra { name: \"Alice\", age: 26 } user = { name: \"Bob\", age: 30 }; // Lỗi: \"Assignment to constant variable.\" ","description":"Tìm hiểu về `const` trong JavaScript, cách khai báo và sử dụng biến hằng, và khi nào nên sử dụng `const` thay vì các từ khóa khai báo biến khác.","tags":["javascript","const","programming","blog"],"title":"JavaScript const Khai Báo Biến Hằng","uri":"/post/2020/javascript-const/"},{"content":"1. JavaScript Data Types: Khái Niệm JavaScript hỗ trợ hai loại kiểu dữ liệu chính: Primitive (nguyên thủy) và Non-Primitive (phi nguyên thủy). Kiểu dữ liệu nguyên thủy là những kiểu dữ liệu không thể thay đổi, trong khi kiểu dữ liệu phi nguyên thủy là các đối tượng có thể thay đổi.\n2. Các Kiểu Dữ Liệu Nguyên Thủy 1. Number (Số) Kiểu Number được sử dụng để biểu diễn các giá trị số, bao gồm cả số nguyên và số thực.\nVí dụ: let a = 10; // Số nguyên let b = 3.14; // Số thực 2. String (Chuỗi) Kiểu String đại diện cho dãy ký tự. Dãy ký tự có thể được bao quanh bởi dấu nháy đơn (’) hoặc nháy kép (\").\nVí dụ: let name = \"John\"; // Sử dụng dấu nháy kép let greeting = 'Hello, World!'; // Sử dụng dấu nháy đơn 3. Boolean (Boolean) Kiểu Boolean chỉ có hai giá trị là true và false, dùng để biểu diễn các giá trị logic.\nVí dụ: let isJavaScriptFun = true; let isCodingHard = false; 4. Undefined (Chưa được định nghĩa) Kiểu undefined là giá trị mặc định của biến khi nó được khai báo nhưng chưa được gán giá trị.\nVí dụ: let x; console.log(x); // In ra undefined 5. Null (Null) Kiểu null đại diện cho một giá trị không tồn tại hoặc không hợp lệ. Đây là một kiểu dữ liệu đặc biệt, được sử dụng để chỉ rõ rằng một giá trị không có.\nVí dụ: let y = null; console.log(y); // In ra null 6. Symbol (Biểu tượng) Kiểu Symbol đại diện cho một giá trị duy nhất và không thể thay đổi. Symbol được sử dụng để tạo ra các giá trị không thể so sánh hoặc trùng lặp.\nVí dụ: let sym = Symbol('description'); console.log(sym); // In ra Symbol(description) 7. BigInt (BigInt) Kiểu BigInt được sử dụng để biểu diễn các số nguyên rất lớn mà kiểu Number không thể lưu trữ được. BigInt có thể được tạo ra bằng cách thêm hậu tố n vào số nguyên.\nVí dụ: let bigNumber = 1234567890123456789012345678901234567890n; console.log(bigNumber); // In ra 1234567890123456789012345678901234567890n 3. Các Kiểu Dữ Liệu Phi Nguyên Thủy 1. Object (Đối tượng) Kiểu Object là một tập hợp các thuộc tính (properties), mỗi thuộc tính có một tên và giá trị. Đối tượng trong JavaScript có thể chứa các giá trị của bất kỳ kiểu dữ liệu nào, kể cả các đối tượng khác.\nVí dụ: let person = { name: \"John\", age: 30, isStudent: false }; 2. Array (Mảng) Mảng là một kiểu đối tượng đặc biệt dùng để lưu trữ danh sách các giá trị. Mảng có thể chứa các giá trị của nhiều kiểu dữ liệu khác nhau.\nVí dụ: let colors = [\"red\", \"green\", \"blue\"]; console.log(colors[0]); // In ra red 3. Function (Hàm) Hàm là một đối tượng trong JavaScript có thể được gọi để thực thi một đoạn mã.\nVí dụ: function greet(name) { return \"Hello, \" + name; } console.log(greet(\"John\")); // In ra Hello, John 4. Khi Nào Sử Dụng Các Kiểu Dữ Liệu Number: Khi bạn cần làm việc với các phép toán số học, chẳng hạn như cộng, trừ, nhân, chia. String: Khi bạn cần làm việc với chuỗi ký tự, chẳng hạn như hiển thị thông điệp hoặc thao tác với văn bản. Boolean: Khi bạn cần kiểm tra một điều kiện hoặc thực hiện các phép toán logic (true/false). Undefined và Null: Khi bạn muốn khởi tạo giá trị mặc định cho một biến mà chưa xác định giá trị cụ thể. Symbol: Khi bạn cần tạo các giá trị duy nhất mà không cần quan tâm đến giá trị cụ thể. BigInt: Khi bạn cần làm việc với số nguyên rất lớn, vượt qua giới hạn của Number. Object và Array: Khi bạn cần lưu trữ và xử lý nhiều giá trị dưới dạng các cặp khóa-giá trị hoặc danh sách dữ liệu. Function: Khi bạn cần tái sử dụng một đoạn mã nhiều lần thông qua một tên và có thể truyền đối số vào. ","description":"Tìm hiểu các kiểu dữ liệu trong JavaScript, bao gồm các kiểu dữ liệu nguyên thủy và đối tượng, cùng với cách sử dụng chúng trong lập trình.","tags":["javascript","data types","programming","blog"],"title":"JavaScript Data Types","uri":"/post/2020/javascript-data-types/"},{"content":"1. Hiển Thị Đối Tượng trong JavaScript Trong JavaScript, một đối tượng là một tập hợp các cặp key-value. Để hiển thị một đối tượng, bạn có thể sử dụng nhiều cách khác nhau tùy thuộc vào ngữ cảnh và yêu cầu của chương trình.\n2. Cách Hiển Thị Đối Tượng JavaScript 1. Sử dụng console.log() Cách đơn giản nhất để hiển thị đối tượng là sử dụng phương thức console.log(). Đây là một cách phổ biến và dễ sử dụng trong quá trình phát triển và gỡ lỗi.\nVí dụ: let person = { name: \"John\", age: 30, city: \"New York\" }; console.log(person); Kết quả sẽ in ra đối tượng trong console như sau:\n{ name: \"John\", age: 30, city: \"New York\" } 2. Sử dụng JSON.stringify() Nếu bạn muốn hiển thị đối tượng dưới dạng chuỗi (string), bạn có thể sử dụng JSON.stringify(). Phương thức này chuyển đổi một đối tượng JavaScript thành một chuỗi JSON, dễ dàng để hiển thị trong giao diện người dùng hoặc gửi qua mạng.\nVí dụ: let person = { name: \"John\", age: 30, city: \"New York\" }; console.log(JSON.stringify(person)); Kết quả:\n{\"name\":\"John\",\"age\":30,\"city\":\"New York\"} Điều này rất hữu ích khi bạn cần hiển thị đối tượng theo một định dạng chuỗi, ví dụ như khi gửi đối tượng qua API.\n3. Sử dụng for…in loop Nếu bạn muốn duyệt qua các thuộc tính của đối tượng và hiển thị từng cặp key-value, bạn có thể sử dụng vòng lặp for...in.\nVí dụ: let person = { name: \"John\", age: 30, city: \"New York\" }; for (let key in person) { console.log(key + \": \" + person[key]); } Kết quả:\nname: John age: 30 city: New York Phương pháp này rất hữu ích khi bạn muốn hiển thị tất cả các thuộc tính của một đối tượng mà không cần phải chỉ định tên thuộc tính cụ thể.\n4. Sử dụng Object.entries() Phương thức Object.entries() trả về một mảng chứa tất cả các cặp [key, value] của đối tượng, có thể được duyệt qua bằng vòng lặp forEach() để hiển thị.\nVí dụ: let person = { name: \"John\", age: 30, city: \"New York\" }; Object.entries(person).forEach(([key, value]) =\u003e { console.log(key + \": \" + value); }); Kết quả:\nname: John age: 30 city: New York Phương pháp này có ưu điểm là dễ dàng sử dụng với các phương thức hàm như forEach(), giúp mã nguồn trở nên ngắn gọn và dễ hiểu.\n5. Sử dụng Object.keys() và forEach() Nếu bạn chỉ quan tâm đến các keys (khóa) của đối tượng, bạn có thể sử dụng Object.keys() kết hợp với forEach() để hiển thị các giá trị liên quan đến các khóa.\nVí dụ: let person = { name: \"John\", age: 30, city: \"New York\" }; Object.keys(person).forEach(key =\u003e { console.log(key + \": \" + person[key]); }); Kết quả:\nname: John age: 30 city: New York Phương pháp này giúp bạn dễ dàng thao tác với các keys của đối tượng.\n3. Khi Nào Sử Dụng Các Phương Pháp Hiển Thị Đối Tượng console.log(): Dùng khi bạn muốn hiển thị đối tượng trong quá trình gỡ lỗi hoặc trong console để theo dõi. JSON.stringify(): Dùng khi bạn muốn chuyển đổi đối tượng thành chuỗi JSON, để gửi qua API hoặc hiển thị trên giao diện người dùng. for…in loop: Dùng khi bạn muốn duyệt qua tất cả các thuộc tính của đối tượng và hiển thị chúng. Object.entries(): Dùng khi bạn muốn duyệt qua các cặp key-value và có thể sử dụng các phương thức hàm như forEach(). Object.keys() với forEach(): Dùng khi bạn chỉ quan tâm đến keys của đối tượng và muốn thao tác với chúng. ","description":"Khám phá cách hiển thị và làm việc với các đối tượng trong JavaScript. Bài viết này hướng dẫn cách hiển thị các đối tượng JavaScript bằng nhiều phương pháp khác nhau.","tags":["javascript","objects","display","programming","blog"],"title":"JavaScript Display Objects","uri":"/post/2020/javascript-display-objects/"},{"content":"1. Giới Thiệu về JavaScript Events Trong JavaScript, events (sự kiện) là các hành động hoặc sự thay đổi xảy ra trong ứng dụng mà bạn có thể xử lý. Các sự kiện thường được liên kết với các yếu tố DOM (Document Object Model) như nút nhấn, di chuyển chuột, gõ phím, và nhiều hành động khác.\nSự kiện giúp bạn tương tác với người dùng, thực hiện các hành động như thay đổi nội dung, hiển thị thông báo, hoặc gửi dữ liệu mà không làm mới trang.\n2. Các Loại JavaScript Events Dưới đây là một số sự kiện phổ biến trong JavaScript:\nclick: Khi người dùng nhấp chuột vào một phần tử. keypress: Khi người dùng nhấn một phím. mouseover: Khi con trỏ chuột di chuyển vào phần tử. mouseout: Khi con trỏ chuột di chuyển ra khỏi phần tử. keydown: Khi người dùng nhấn một phím và giữ. keyup: Khi người dùng nhấn và thả một phím. submit: Khi một biểu mẫu được gửi. 3. Cách Đăng Ký và Xử Lý Sự Kiện Để xử lý một sự kiện trong JavaScript, bạn cần đăng ký sự kiện cho một phần tử và chỉ định một hàm xử lý sự kiện (event handler). Có thể đăng ký sự kiện bằng cách sử dụng addEventListener() hoặc các thuộc tính sự kiện như onclick.\n1. Sử Dụng addEventListener() Phương thức addEventListener() cho phép bạn đăng ký một sự kiện và chỉ định một hàm để xử lý khi sự kiện xảy ra.\nCú pháp: element.addEventListener(event, function, useCapture); Ví dụ: const button = document.getElementById(\"myButton\"); button.addEventListener(\"click\", function() { alert(\"Button clicked!\"); }); Khi người dùng nhấp vào nút, hàm sẽ được gọi và hiển thị thông báo.\n2. Sử Dụng Thuộc Tính Sự Kiện Bạn cũng có thể đăng ký sự kiện trực tiếp trên phần tử bằng cách sử dụng các thuộc tính sự kiện như onclick, onmouseover, v.v.\nVí dụ: \u003cbutton id=\"myButton\" onclick=\"alert('Button clicked!')\"\u003eClick Me\u003c/button\u003e Mặc dù cách này nhanh chóng, nhưng sử dụng addEventListener() giúp bạn có thể gắn nhiều sự kiện cho một phần tử, điều mà thuộc tính sự kiện không hỗ trợ.\n3. Sử Dụng Tham Số Event Khi một sự kiện xảy ra, JavaScript tự động truyền một đối tượng sự kiện (Event object) vào hàm xử lý sự kiện. Đối tượng này chứa các thông tin về sự kiện, như loại sự kiện, phần tử kích hoạt sự kiện, và các thuộc tính khác.\nVí dụ: const button = document.getElementById(\"myButton\"); button.addEventListener(\"click\", function(event) { console.log(\"Event type: \" + event.type); console.log(\"Event target: \" + event.target); }); Trong ví dụ trên, đối tượng event cung cấp thông tin về sự kiện đã xảy ra, như loại sự kiện (click) và phần tử kích hoạt sự kiện.\n4. Ngừng Propagation và Ngăn Chặn Mặc Định Trong JavaScript, bạn có thể kiểm soát sự lan truyền của sự kiện và ngừng hành động mặc định của sự kiện.\nNgừng Lan Truyền (Event Propagation): Lan truyền sự kiện là quá trình sự kiện được truyền từ phần tử con đến phần tử cha. Để ngừng quá trình này, bạn có thể sử dụng phương thức stopPropagation().\nVí dụ:\ndocument.getElementById(\"parent\").addEventListener(\"click\", function() { console.log(\"Parent clicked!\"); }); document.getElementById(\"child\").addEventListener(\"click\", function(event) { event.stopPropagation(); console.log(\"Child clicked!\"); }); Trong ví dụ này, khi người dùng nhấp vào phần tử con, sự kiện không được truyền lên phần tử cha.\nNgừng Hành Động Mặc Định (Prevent Default Action): Phương thức preventDefault() ngừng hành động mặc định của sự kiện, chẳng hạn như gửi một biểu mẫu khi nhấp vào nút gửi.\nVí dụ:\ndocument.getElementById(\"myForm\").addEventListener(\"submit\", function(event) { event.preventDefault(); alert(\"Form submission prevented!\"); }); 4. Trình xử lý sự kiện JavaScript Trình xử lý sự kiện có thể được sử dụng để xử lý và xác minh dữ liệu đầu vào của người dùng, hành động của người dùng và hành động của trình duyệt:\nNhững việc cần làm mỗi khi tải trang Những việc cần làm khi đóng trang Hành động cần thực hiện khi người dùng nhấp vào nút Nội dung cần được xác minh khi người dùng nhập dữ liệu Và nhiều hơn nữa… Có thể sử dụng nhiều phương pháp khác nhau để JavaScript hoạt động với các sự kiện:\nThuộc tính sự kiện HTML có thể thực thi mã JavaScript trực tiếp Thuộc tính sự kiện HTML có thể gọi các hàm JavaScript Bạn có thể gán các hàm xử lý sự kiện của riêng bạn cho các phần tử HTML Bạn có thể ngăn chặn các sự kiện được gửi hoặc được xử lý Và nhiều hơn nữa… ","description":"Khám phá cách sử dụng và xử lý các sự kiện trong JavaScript. Bài viết này cung cấp thông tin chi tiết về các sự kiện phổ biến và cách sử dụng chúng trong các ứng dụng web.","tags":["javascript","events","programming","blog"],"title":"JavaScript Events","uri":"/post/2020/javascript-events/"},{"content":"1. Giới Thiệu về JavaScript Object Constructors Trong JavaScript, một Object Constructor là một hàm đặc biệt dùng để tạo đối tượng. Constructors cho phép bạn tạo ra các đối tượng với các thuộc tính và phương thức chung. Bạn có thể tạo ra nhiều đối tượng cùng loại mà không cần phải viết lại mã cho mỗi đối tượng.\n2. Cách Tạo Một Object Constructor 1. Sử Dụng Hàm Constructor Bạn có thể tạo một constructor bằng cách sử dụng hàm (function). Khi bạn sử dụng hàm với từ khóa new, một đối tượng mới sẽ được tạo và gán các thuộc tính và phương thức từ constructor.\nVí dụ: function Person(name, age) { this.name = name; this.age = age; this.greet = function() { console.log(\"Hello, my name is \" + this.name); }; } const person1 = new Person(\"John\", 30); const person2 = new Person(\"Alice\", 25); person1.greet(); // Output: Hello, my name is John person2.greet(); // Output: Hello, my name is Alice Trong ví dụ trên, hàm Person là một constructor. Mỗi khi bạn tạo một đối tượng mới với new Person(), đối tượng đó sẽ có các thuộc tính name, age, và phương thức greet.\n2. Sử Dụng Constructor với Class (ES6) Từ phiên bản ES6, JavaScript hỗ trợ cú pháp class để định nghĩa constructors, giúp việc tạo đối tượng trở nên dễ dàng và dễ hiểu hơn.\nVí dụ: class Person { constructor(name, age) { this.name = name; this.age = age; } greet() { console.log(\"Hello, my name is \" + this.name); } } const person1 = new Person(\"John\", 30); const person2 = new Person(\"Alice\", 25); person1.greet(); // Output: Hello, my name is John person2.greet(); // Output: Hello, my name is Alice Ở đây, Person là một lớp với phương thức constructor để khởi tạo các thuộc tính cho đối tượng. Các đối tượng được tạo ra từ lớp Person sẽ có các thuộc tính và phương thức giống nhau.\n3. Khi Nào Sử Dụng Object Constructors Bạn nên sử dụng constructors khi bạn cần tạo ra nhiều đối tượng có chung thuộc tính và phương thức. Một số tình huống điển hình bao gồm:\nKhi bạn cần tạo các đối tượng có cùng cấu trúc nhưng giá trị khác nhau: Ví dụ, tạo đối tượng sinh viên, nhân viên, sản phẩm trong một cửa hàng. Khi bạn muốn quản lý mã nguồn một cách có tổ chức và tái sử dụng được: Constructors cho phép bạn giảm thiểu mã nguồn trùng lặp và dễ dàng quản lý các đối tượng của mình. 4. Phương Thức Trong Object Constructors Các phương thức có thể được định nghĩa trong constructor để cung cấp hành vi cho đối tượng. Các phương thức này có thể được gọi từ các đối tượng được tạo ra từ constructor.\nVí dụ với phương thức: function Car(make, model) { this.make = make; this.model = model; this.displayInfo = function() { console.log(\"Car make: \" + this.make + \", Model: \" + this.model); }; } const car1 = new Car(\"Toyota\", \"Corolla\"); const car2 = new Car(\"Honda\", \"Civic\"); car1.displayInfo(); // Output: Car make: Toyota, Model: Corolla car2.displayInfo(); // Output: Car make: Honda, Model: Civic Ở đây, phương thức displayInfo được sử dụng để hiển thị thông tin về chiếc xe.\n","description":"Khám phá cách tạo đối tượng trong JavaScript bằng cách sử dụng constructors. Bài viết này hướng dẫn cách sử dụng các constructors để khởi tạo đối tượng và cách tùy chỉnh chúng.","tags":["javascript","objects","constructors","programming","blog"],"title":"JavaScript Object Constructors","uri":"/post/2020/javascript-object-constructors/"},{"content":"1. JavaScript Object Methods: Khái Niệm Trong JavaScript, Object methods là các phương thức được định nghĩa trong một đối tượng. Những phương thức này cho phép bạn thực hiện các hành động hoặc thao tác liên quan đến dữ liệu trong đối tượng. Một đối tượng trong JavaScript có thể chứa các thuộc tính (properties) và các phương thức (methods).\n2. Định Nghĩa và Cách Sử Dụng Object Methods 1. Định nghĩa một Object Method Phương thức của đối tượng là một hàm được định nghĩa bên trong đối tượng đó. Dưới đây là một ví dụ về cách định nghĩa phương thức trong đối tượng:\nVí dụ: let person = { name: \"John\", age: 30, greet: function() { console.log(\"Hello, \" + this.name); } }; person.greet(); // In ra \"Hello, John\" Trong ví dụ này, greet là một phương thức trong đối tượng person. Khi gọi person.greet(), phương thức này sẽ hiển thị thông điệp chào mừng.\n3. Các Phương Thức Của Đối Tượng JavaScript Thường Gặp 1. Object.keys() Phương thức Object.keys() trả về một mảng chứa tất cả các thuộc tính (keys) của đối tượng.\nVí dụ: let person = { name: \"John\", age: 30 }; let keys = Object.keys(person); console.log(keys); // In ra [\"name\", \"age\"] 2. Object.values() Phương thức Object.values() trả về một mảng chứa tất cả các giá trị (values) của đối tượng.\nVí dụ: let person = { name: \"John\", age: 30 }; let values = Object.values(person); console.log(values); // In ra [\"John\", 30] 3. Object.entries() Phương thức Object.entries() trả về một mảng chứa tất cả các cặp [key, value] của đối tượng dưới dạng các mảng con.\nVí dụ: let person = { name: \"John\", age: 30 }; let entries = Object.entries(person); console.log(entries); // In ra [[\"name\", \"John\"], [\"age\", 30]] 4. Object.hasOwnProperty() Phương thức hasOwnProperty() kiểm tra xem đối tượng có thuộc tính (key) cụ thể hay không. Phương thức này chỉ kiểm tra các thuộc tính trực tiếp của đối tượng, không kiểm tra qua chuỗi kế thừa.\nVí dụ: let person = { name: \"John\", age: 30 }; console.log(person.hasOwnProperty(\"name\")); // In ra true console.log(person.hasOwnProperty(\"gender\")); // In ra false 5. Object.assign() Phương thức Object.assign() sao chép tất cả các thuộc tính từ các đối tượng nguồn vào đối tượng đích. Phương thức này thực hiện sao chép theo kiểu “shallow” (nông), tức là chỉ sao chép các giá trị của các thuộc tính ở cấp độ 1.\nVí dụ: let person = { name: \"John\", age: 30 }; let address = { city: \"New York\", country: \"USA\" }; let mergedObject = Object.assign({}, person, address); console.log(mergedObject); // In ra { name: \"John\", age: 30, city: \"New York\", country: \"USA\" } 6. Object.freeze() Phương thức Object.freeze() đóng băng một đối tượng, ngăn không cho thay đổi thuộc tính của nó. Sau khi đóng băng, bạn không thể thay đổi, thêm mới hoặc xóa thuộc tính của đối tượng.\nVí dụ: let person = { name: \"John\", age: 30 }; Object.freeze(person); person.age = 35; // Thay đổi sẽ không có hiệu lực console.log(person.age); // In ra 30 7. Object.seal() Phương thức Object.seal() niêm phong một đối tượng, cho phép bạn thay đổi các giá trị của thuộc tính đã tồn tại nhưng không thể thêm mới hoặc xóa thuộc tính.\nVí dụ: let person = { name: \"John\", age: 30 }; Object.seal(person); person.age = 35; // Thay đổi giá trị có thể delete person.name; // Không thể xóa thuộc tính console.log(person); // In ra { name: \"John\", age: 35 } 4. Khi Nào Sử Dụng Object Methods Object.keys(): Khi bạn cần lấy tất cả các khóa của đối tượng dưới dạng mảng. Object.values(): Khi bạn cần lấy tất cả các giá trị của đối tượng dưới dạng mảng. Object.entries(): Khi bạn cần lấy cả khóa và giá trị của đối tượng dưới dạng mảng con. Object.hasOwnProperty(): Khi bạn muốn kiểm tra sự tồn tại của thuộc tính trong đối tượng mà không cần phải kiểm tra qua chuỗi kế thừa. Object.assign(): Khi bạn cần sao chép các thuộc tính từ đối tượng này sang đối tượng khác. Object.freeze(): Khi bạn muốn đóng băng đối tượng và ngăn không cho thay đổi. Object.seal(): Khi bạn muốn ngăn cản việc xóa thuộc tính mà vẫn cho phép thay đổi giá trị của thuộc tính hiện tại. ","description":"Khám phá các phương thức của đối tượng trong JavaScript, từ các phương thức cơ bản đến các phương thức mạnh mẽ giúp thao tác và quản lý dữ liệu trong đối tượng.","tags":["javascript","object","methods","programming","blog"],"title":"JavaScript Object Methods","uri":"/post/2020/javascript-object-methods/"},{"content":"1. JavaScript Operators: Khái Niệm Cơ Bản Trong JavaScript, toán tử (operators) là các ký hiệu hoặc từ khóa dùng để thực hiện các phép toán hoặc các thao tác trên dữ liệu. JavaScript cung cấp nhiều loại toán tử khác nhau, bao gồm các toán tử số học, so sánh, gán, logic, và nhiều loại khác.\n2. Các Loại Toán Tử Trong JavaScript Toán tử số học (Arithmetic Operators) Các toán tử này được sử dụng để thực hiện các phép toán số học trên các giá trị số.\nToán Tử Mô Tả Ví Dụ + Cộng 5 + 3 // 8 - Trừ 5 - 3 // 2 * Nhân 5 * 3 // 15 / Chia 5 / 3 // 1.6667 % Lấy phần dư 5 % 3 // 2 ++ Tăng giá trị lên 1 x++ // x = x + 1 -- Giảm giá trị đi 1 x-- // x = x - 1 Ví dụ:\nlet a = 5; let b = 3; console.log(a + b); // In ra 8 console.log(a - b); // In ra 2 Toán tử so sánh (Comparison Operators) Các toán tử này được sử dụng để so sánh hai giá trị và trả về true hoặc false.\nToán Tử Mô Tả Ví Dụ == Bằng (loại không quan trọng) 5 == '5' // true === Bằng (loại quan trọng) 5 === '5' // false != Khác (loại không quan trọng) 5 != 3 // true !== Khác (loại quan trọng) 5 !== '5' // true \u003e Lớn hơn 5 \u003e 3 // true \u003c Nhỏ hơn 5 \u003c 3 // false \u003e= Lớn hơn hoặc bằng 5 \u003e= 5 // true \u003c= Nhỏ hơn hoặc bằng 5 \u003c= 3 // false Ví dụ:\nlet x = 5; let y = 10; console.log(x == y); // In ra false console.log(x \u003c y); // In ra true Toán tử gán (Assignment Operators) Toán tử gán được sử dụng để gán giá trị cho biến.\nToán Tử Mô Tả Ví Dụ = Gán giá trị x = 5 += Gán và cộng x += 5 // x = x + 5 -= Gán và trừ x -= 3 // x = x - 3 *= Gán và nhân x *= 2 // x = x * 2 /= Gán và chia x /= 2 // x = x / 2 %= Gán và lấy phần dư x %= 2 // x = x % 2 Ví dụ:\nlet a = 10; a += 5; // a = 10 + 5 console.log(a); // In ra 15 Toán tử logic (Logical Operators) Các toán tử logic được sử dụng để kết hợp các biểu thức boolean.\nToán Tử Mô Tả Ví Dụ \u0026\u0026 Và (AND) true \u0026\u0026 false // false ` ` ! Không (NOT) !true // false Ví dụ:\nlet a = true; let b = false; console.log(a \u0026\u0026 b); // In ra false console.log(a || b); // In ra true Toán tử điều kiện (Ternary Operator) Toán tử điều kiện là một cách ngắn gọn để viết câu lệnh if-else.\nCú pháp:\ncondition ? expr1 : expr2; Ví dụ:\nlet age = 20; let result = (age \u003e= 18) ? \"Adult\" : \"Minor\"; console.log(result); // In ra \"Adult\" Toán tử typeof và instanceof typeof được sử dụng để kiểm tra kiểu dữ liệu của một biến. instanceof được sử dụng để kiểm tra đối tượng có phải là thể hiện của một lớp hay không. Ví dụ:\nlet a = \"Hello\"; console.log(typeof a); // In ra \"string\" let obj = {}; console.log(obj instanceof Object); // In ra true 3. Khi Nào Sử Dụng Các Toán Tử Sử dụng toán tử số học khi bạn cần thực hiện các phép toán với giá trị số. Sử dụng toán tử so sánh khi bạn muốn so sánh hai giá trị. Sử dụng toán tử gán để gán giá trị cho biến hoặc thực hiện các phép toán và gán kết quả cho biến. Sử dụng toán tử logic khi bạn cần kết hợp hoặc đảo ngược các điều kiện. Sử dụng toán tử điều kiện để thay thế câu lệnh if-else đơn giản. ","description":"Tìm hiểu các toán tử trong JavaScript, cách sử dụng chúng và phân loại các toán tử cơ bản trong ngôn ngữ này.","tags":["javascript","operators","programming","blog"],"title":"JavaScript Operators","uri":"/post/2020/javascript-arithmetic/"},{"content":"1. JavaScript Operators: Khái Niệm Cơ Bản Trong JavaScript, toán tử (operators) là các ký hiệu hoặc từ khóa dùng để thực hiện các phép toán hoặc các thao tác trên dữ liệu. JavaScript cung cấp nhiều loại toán tử khác nhau, bao gồm các toán tử số học, so sánh, gán, logic, và nhiều loại khác.\n2. Các Loại Toán Tử Trong JavaScript Toán tử số học (Arithmetic Operators) Các toán tử này được sử dụng để thực hiện các phép toán số học trên các giá trị số.\nToán Tử Mô Tả Ví Dụ + Cộng 5 + 3 // 8 - Trừ 5 - 3 // 2 * Nhân 5 * 3 // 15 / Chia 5 / 3 // 1.6667 % Lấy phần dư 5 % 3 // 2 ++ Tăng giá trị lên 1 x++ // x = x + 1 -- Giảm giá trị đi 1 x-- // x = x - 1 Ví dụ:\nlet a = 5; let b = 3; console.log(a + b); // In ra 8 console.log(a - b); // In ra 2 Toán tử so sánh (Comparison Operators) Các toán tử này được sử dụng để so sánh hai giá trị và trả về true hoặc false.\nToán Tử Mô Tả Ví Dụ == Bằng (loại không quan trọng) 5 == '5' // true === Bằng (loại quan trọng) 5 === '5' // false != Khác (loại không quan trọng) 5 != 3 // true !== Khác (loại quan trọng) 5 !== '5' // true \u003e Lớn hơn 5 \u003e 3 // true \u003c Nhỏ hơn 5 \u003c 3 // false \u003e= Lớn hơn hoặc bằng 5 \u003e= 5 // true \u003c= Nhỏ hơn hoặc bằng 5 \u003c= 3 // false Ví dụ:\nlet x = 5; let y = 10; console.log(x == y); // In ra false console.log(x \u003c y); // In ra true Toán tử gán (Assignment Operators) Toán tử gán được sử dụng để gán giá trị cho biến.\nToán Tử Mô Tả Ví Dụ = Gán giá trị x = 5 += Gán và cộng x += 5 // x = x + 5 -= Gán và trừ x -= 3 // x = x - 3 *= Gán và nhân x *= 2 // x = x * 2 /= Gán và chia x /= 2 // x = x / 2 %= Gán và lấy phần dư x %= 2 // x = x % 2 Ví dụ:\nlet a = 10; a += 5; // a = 10 + 5 console.log(a); // In ra 15 Toán tử logic (Logical Operators) Các toán tử logic được sử dụng để kết hợp các biểu thức boolean.\nToán Tử Mô Tả Ví Dụ \u0026\u0026 Và (AND) true \u0026\u0026 false // false ` ` ! Không (NOT) !true // false Ví dụ:\nlet a = true; let b = false; console.log(a \u0026\u0026 b); // In ra false console.log(a || b); // In ra true Toán tử điều kiện (Ternary Operator) Toán tử điều kiện là một cách ngắn gọn để viết câu lệnh if-else.\nCú pháp:\ncondition ? expr1 : expr2; Ví dụ:\nlet age = 20; let result = (age \u003e= 18) ? \"Adult\" : \"Minor\"; console.log(result); // In ra \"Adult\" Toán tử typeof và instanceof typeof được sử dụng để kiểm tra kiểu dữ liệu của một biến. instanceof được sử dụng để kiểm tra đối tượng có phải là thể hiện của một lớp hay không. Ví dụ:\nlet a = \"Hello\"; console.log(typeof a); // In ra \"string\" let obj = {}; console.log(obj instanceof Object); // In ra true 3. Khi Nào Sử Dụng Các Toán Tử Sử dụng toán tử số học khi bạn cần thực hiện các phép toán với giá trị số. Sử dụng toán tử so sánh khi bạn muốn so sánh hai giá trị. Sử dụng toán tử gán để gán giá trị cho biến hoặc thực hiện các phép toán và gán kết quả cho biến. Sử dụng toán tử logic khi bạn cần kết hợp hoặc đảo ngược các điều kiện. Sử dụng toán tử điều kiện để thay thế câu lệnh if-else đơn giản. ","description":"Tìm hiểu các toán tử trong JavaScript, cách sử dụng chúng và phân loại các toán tử cơ bản trong ngôn ngữ này.","tags":["javascript","operators","programming","blog"],"title":"JavaScript Operators","uri":"/post/2020/javascript-operators/"},{"content":"1. JavaScript Syntax: Là Gì? Cú pháp JavaScript xác định cách thức viết mã JavaScript đúng để trình duyệt hoặc môi trường JavaScript có thể hiểu và thực thi. Các quy tắc cú pháp cơ bản bao gồm cách khai báo biến, cách viết các biểu thức, lệnh điều kiện, vòng lặp, và các hàm.\n2. Cú Pháp Cơ Bản trong JavaScript 2.1. Khai Báo Biến JavaScript cung cấp ba cách để khai báo biến: var, let, và const.\nvar: Khai báo biến với phạm vi toàn cục hoặc hàm. let: Khai báo biến với phạm vi khối (block-level). const: Khai báo hằng số, không thể thay đổi giá trị sau khi đã được gán. Cách sử dụng:\nlet x = 10; // Biến có thể thay đổi giá trị const y = 20; // Hằng số không thay đổi giá trị 2.2. Các Lệnh Điều Kiện JavaScript cung cấp các cấu trúc điều kiện như if, else, else if, và switch.\nCách sử dụng:\nlet age = 20; if (age \u003e= 18) { console.log(\"Adult\"); } else { console.log(\"Minor\"); } Cách sử dụng switch:\nlet day = 2; switch(day) { case 1: console.log(\"Monday\"); break; case 2: console.log(\"Tuesday\"); break; default: console.log(\"Other day\"); } 2.3. Vòng Lặp Các vòng lặp cơ bản trong JavaScript gồm for, while, và do...while.\nCách sử dụng vòng lặp for:\nfor (let i = 0; i \u003c 5; i++) { console.log(i); } Cách sử dụng vòng lặp while:\nlet i = 0; while (i \u003c 5) { console.log(i); i++; } 2.4. Hàm Hàm trong JavaScript được định nghĩa bằng từ khóa function. Hàm có thể nhận đối số và trả về giá trị.\nCách sử dụng:\nfunction add(a, b) { return a + b; } let sum = add(3, 4); console.log(sum); // In ra 7 2.5. Biểu Thức và Toán Tử Biểu thức trong JavaScript là các phép toán hoặc các phép tính có thể trả về giá trị. Toán tử là các ký hiệu dùng để thực hiện các phép toán.\nCách sử dụng:\nlet x = 10; let y = 5; let sum = x + y; // Toán tử cộng let product = x * y; // Toán tử nhân 2.6. Câu Lệnh Trả Về (return) Câu lệnh return được sử dụng trong hàm để trả về giá trị từ hàm.\nCách sử dụng:\nfunction multiply(a, b) { return a * b; } let result = multiply(3, 5); console.log(result); // In ra 15 ","description":"Khám phá cú pháp cơ bản trong JavaScript. Bài viết sẽ hướng dẫn về cách viết mã JavaScript chuẩn, bao gồm khai báo biến, lệnh điều kiện, vòng lặp và hàm.","tags":["javascript","syntax","programming","blog"],"title":"JavaScript Syntax Cú Pháp Cơ Bản","uri":"/post/2020/javascript-syntax/"},{"content":"1. JavaScript Statements: Là Gì? Một lệnh trong JavaScript là một câu lệnh thực thi một hành động cụ thể. Lệnh có thể là một biểu thức (expression) hoặc một lệnh điều kiện, vòng lặp, khai báo biến, v.v.\n2. Các Loại Lệnh trong JavaScript 2.1. Lệnh Biểu Thức (Expression Statements) Chức năng: Các biểu thức trong JavaScript có thể thực thi hành động và trả về giá trị.\nCách sử dụng:\nlet x = 10; // Biểu thức gán console.log(x); // Biểu thức gọi hàm 2.2. Lệnh Điều Kiện (Conditional Statements) Chức năng: Sử dụng để kiểm tra một điều kiện và thực hiện các hành động khác nhau tùy thuộc vào kết quả điều kiện.\nCách sử dụng:\nlet age = 18; if (age \u003e= 18) { console.log(\"Adult\"); } else { console.log(\"Minor\"); } 2.3. Lệnh Vòng Lặp (Loop Statements) Chức năng: Lệnh vòng lặp được sử dụng để lặp lại một đoạn mã nhiều lần. Các vòng lặp phổ biến trong JavaScript bao gồm for, while, và do…while.\nCách sử dụng (vòng lặp for):\nfor (let i = 0; i \u003c 5; i++) { console.log(i); } Cách sử dụng (vòng lặp while):\nlet i = 0; while (i \u003c 5) { console.log(i); i++; } 2.4. Lệnh Khai Báo Biến (Declaration Statements) Chức năng: Được sử dụng để khai báo các biến, hằng số hoặc các đối tượng trong JavaScript.\nCách sử dụng:\nlet x = 5; // Khai báo biến const y = 10; // Khai báo hằng số 2.5. Lệnh Trả Về (Return Statements) Chức năng: Lệnh return được sử dụng để trả về giá trị từ một hàm.\nCách sử dụng:\nfunction add(a, b) { return a + b; } let sum = add(3, 4); console.log(sum); // In ra 7 2.6. Lệnh Thử (Throw Statements) Chức năng: Lệnh throw được sử dụng để ném ra một ngoại lệ (exception) khi có lỗi xảy ra.\nCách sử dụng:\nfunction checkAge(age) { if (age \u003c 18) { throw \"Age must be 18 or older\"; } else { console.log(\"Age is valid\"); } } checkAge(15); // Ném ra lỗi: \"Age must be 18 or older\" ","description":"Khám phá các loại lệnh trong JavaScript và cách sử dụng chúng. Tìm hiểu các lệnh cơ bản như expressions, declarations, loops và conditionals.","tags":["javascript","statements","programming","blog"],"title":"JavaScript Statements Các Lệnh Cơ Bản","uri":"/post/2020/javascript-statements/"},{"content":"1. Java Collections Framework là gì? Java Collections Framework (JCF) là một tập hợp các lớp và giao diện trong Java, được sử dụng để lưu trữ và quản lý dữ liệu theo cách hiệu quả. Nó hỗ trợ các cấu trúc dữ liệu như List, Set, Map và Queue, giúp đơn giản hóa việc thao tác trên dữ liệu.\nCác loại Collection chính: List: Lưu trữ các phần tử có thứ tự và cho phép trùng lặp (ArrayList, LinkedList). Set: Không cho phép phần tử trùng lặp (HashSet, TreeSet). Map: Lưu trữ dữ liệu theo cặp Key-Value (HashMap, TreeMap). Ví dụ mã Java: import java.util.*; public class CollectionsExample { public static void main(String[] args) { List\u003cString\u003e list = new ArrayList\u003c\u003e(); list.add(\"Java\"); list.add(\"Python\"); list.add(\"C++\"); for (String lang : list) { System.out.println(lang); } } } 2. Ưu Điểm của Java Collections Framework Hiệu quả: Cung cấp các thuật toán tối ưu cho việc tìm kiếm, sắp xếp và xử lý dữ liệu. Tái sử dụng: Sử dụng lại mã nguồn qua các lớp và giao diện chuẩn. Đồng bộ hóa: Hỗ trợ môi trường đa luồng với các lớp như Vector và Hashtable. ","description":"Tìm hiểu về Java Collections Framework, một phần không thể thiếu trong việc quản lý dữ liệu và cải thiện hiệu suất của các ứng dụng Java. Hãy cùng khám phá các loại Collection và cách sử dụng chúng.","tags":["java","collections","programming","blog"],"title":"Giới Thiệu Java Collections Framework","uri":"/post/2020/java-collections-framework/"},{"content":"1. JavaScript Output: Là Gì? JavaScript cung cấp nhiều cách khác nhau để hiển thị kết quả. Dưới đây là các phương thức phổ biến nhất.\n2. document.write() Chức năng: Ghi nội dung trực tiếp vào tài liệu HTML.\nCách sử dụng: \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003ctitle\u003eDocument Write Example\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cscript\u003e document.write(\"Hello, JavaScript Output!\"); \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e 3. console.log() Chức năng: Ghi thông báo vào bảng điều khiển trình duyệt, thường được sử dụng để gỡ lỗi mã.\nCách sử dụng: \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003ctitle\u003eConsole Log Example\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cscript\u003e console.log(\"Hello, Console!\"); \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e 4. alert() Chức năng: Hiển thị một hộp thoại bật lên với thông báo.\nCách sử dụng: \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003ctitle\u003eAlert Example\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cscript\u003e alert(\"Hello, Alert Box!\"); \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e 5. innerHTML Chức năng: Thay đổi nội dung của một phần tử HTML.\nCách sử dụng: \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003ctitle\u003eInnerHTML Example\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cp id=\"output\"\u003e\u003c/p\u003e \u003cscript\u003e document.getElementById(\"output\").innerHTML = \"Hello, InnerHTML!\"; \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e 6. window.print() Chức năng: Hiển thị hộp thoại in của trình duyệt, thường được sử dụng để in nội dung trang.\nCách sử dụng: \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003ctitle\u003ePrint Example\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cbutton onclick=\"window.print()\"\u003eIn Trang Này\u003c/button\u003e \u003c/body\u003e \u003c/html\u003e ","description":"Tìm hiểu các cách hiển thị kết quả trong JavaScript. Hướng dẫn chi tiết về document.write, console.log, alert, và innerHTML.","tags":["javascript","output","programming","blog"],"title":"JavaScript Output Các Phương Thức Hiển Thị Kết Quả","uri":"/post/2020/javascript-output/"},{"content":"1. Promises là gì? Promises là một tính năng mạnh mẽ trong JavaScript, được sử dụng để xử lý các tác vụ bất đồng bộ. Một Promise đại diện cho một giá trị có thể có sẵn ngay bây giờ, trong tương lai, hoặc không bao giờ.\nBa trạng thái của Promise: Pending: Đang chờ xử lý. Fulfilled: Hoàn thành thành công. Rejected: Thất bại. Ví dụ mã JavaScript: const myPromise = new Promise((resolve, reject) =\u003e { let success = true; if (success) { resolve(\"Promise thành công!\"); } else { reject(\"Promise thất bại.\"); } }); myPromise .then(result =\u003e console.log(result)) .catch(error =\u003e console.error(error)); 2. Lợi Ích của Promises Tránh callback hell: Giúp mã nguồn dễ đọc và bảo trì hơn. Xử lý chuỗi tác vụ: Hỗ trợ chaining qua .then() và .catch(). Tích hợp với async/await: Làm việc tốt với cú pháp hiện đại của JavaScript. 3. Ứng Dụng Thực Tế Gọi API bằng fetch:\nfetch(\"https://api.example.com/data\") .then(response =\u003e response.json()) .then(data =\u003e console.log(data)) .catch(error =\u003e console.error(error)); 4. Ưu Điểm của JavaScript Promises Quản lý bất đồng bộ: Giúp xử lý các tác vụ bất đồng bộ một cách hiệu quả và dễ dàng hơn. Cải thiện khả năng đọc mã: Giảm thiểu sự phức tạp trong mã nguồn so với việc sử dụng callback. Hỗ trợ lỗi tốt hơn: Cung cấp cách tiếp cận rõ ràng hơn để xử lý lỗi thông qua .catch(). 5. Kết Luận Promises giúp bạn xử lý các tác vụ bất đồng bộ một cách hiệu quả hơn, giảm thiểu lỗi và làm cho mã nguồn dễ bảo trì. Hãy thử sử dụng Promises trong các dự án thực tế để cảm nhận sức mạnh của nó!\n","description":"Hiểu về Promises trong JavaScript, một cách hiệu quả để xử lý các tác vụ bất đồng bộ như gọi API, đọc tệp, hay kết nối cơ sở dữ liệu. Bài viết sẽ giúp bạn nắm vững cách sử dụng Promises qua ví dụ thực tế.","tags":["javascript","promises","programming","blog"],"title":"JavaScript Promises Là Gì?","uri":"/post/2020/javascript-promises-/"},{"content":"1. JavaScript: Where To? Khi phát triển web, một câu hỏi phổ biến là: “Nên đặt JavaScript ở đâu trong HTML?”. JavaScript có thể được nhúng trực tiếp vào trang HTML thông qua ba cách chính:\nNội dòng (inline). Trong phần \u003chead\u003e. Trước thẻ đóng \u003c/body\u003e. Hãy cùng tìm hiểu ưu, nhược điểm của từng cách!\n2. Sử Dụng Nội Dòng (Inline Script) JavaScript có thể được viết trực tiếp trong thẻ HTML bằng cách sử dụng thuộc tính onclick, onchange, hoặc các sự kiện khác.\nVí dụ: \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003ctitle\u003eInline JavaScript\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cbutton onclick=\"alert('Hello, Inline JavaScript!')\"\u003eClick Me\u003c/button\u003e \u003c/body\u003e \u003c/html\u003e Ưu điểm:\nĐơn giản, dễ dùng cho các dự án nhỏ. Không cần tệp JavaScript riêng biệt. Nhược điểm:\nKhó bảo trì khi dự án lớn. Khó tách biệt mã HTML và JavaScript, làm giảm tính tái sử dụng. 3. Nhúng Trong \u003chead\u003e Bạn có thể thêm JavaScript vào thẻ \u003chead\u003e trong HTML bằng thẻ \u003cscript\u003e.\nVí dụ: \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003ctitle\u003eJavaScript in Head\u003c/title\u003e \u003cscript\u003e function greet() { alert('Hello, JavaScript in Head!'); } \u003c/script\u003e \u003c/head\u003e \u003cbody\u003e \u003cbutton onclick=\"greet()\"\u003eClick Me\u003c/button\u003e \u003c/body\u003e \u003c/html\u003e Ưu điểm:\nTất cả mã JavaScript được đặt trong một nơi dễ quản lý. Tốt cho việc định nghĩa biến và hàm toàn cục. Nhược điểm:\nCó thể làm chậm quá trình tải trang vì JavaScript sẽ được thực thi trước khi HTML được hiển thị. 4. Đặt Trước \u003c/body\u003e Cách phổ biến nhất là đặt JavaScript trước thẻ đóng \u003c/body\u003e.\nVí dụ: \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003ctitle\u003eJavaScript Before Body\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cbutton id=\"btn\"\u003eClick Me\u003c/button\u003e \u003cscript\u003e document.getElementById('btn').addEventListener('click', function () { alert('Hello, JavaScript Before Body!'); }); \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e Ưu điểm:\nTăng tốc hiển thị trang: HTML được tải và hiển thị trước. Tối ưu trải nghiệm người dùng. Nhược điểm:\nMã JavaScript không sẵn sàng cho đến khi toàn bộ HTML được tải. 5. Tách JavaScript Thành File Riêng Một cách tối ưu hơn là lưu mã JavaScript trong một tệp .js riêng biệt và nhúng vào HTML bằng thẻ \u003cscript\u003e.\nVí dụ: HTML:\n\u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003ctitle\u003eExternal JavaScript\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cbutton id=\"btn\"\u003eClick Me\u003c/button\u003e \u003cscript src=\"script.js\"\u003e\u003c/script\u003e \u003c/body\u003e \u003c/html\u003e script.js:\ndocument.getElementById('btn').addEventListener('click', function () { alert('Hello, External JavaScript!'); }); Ưu điểm:\nTách biệt rõ ràng giữa mã HTML và JavaScript. Dễ dàng tái sử dụng mã JavaScript. Nhược điểm:\nPhụ thuộc vào mạng để tải tệp .js. 6. Kết Luận Việc lựa chọn vị trí nhúng JavaScript trong HTML có thể ảnh hưởng đến hiệu suất và trải nghiệm người dùng. Hãy cân nhắc các ưu nhược điểm của từng phương pháp để đưa ra quyết định phù hợp cho dự án của bạn.\n","description":"Hướng dẫn chi tiết về cách nhúng JavaScript vào trang HTML của bạn. Tìm hiểu sự khác biệt giữa \u003cscript\u003e nội dòng, trong phần \u003chead\u003e, hoặc cuối \u003cbody\u003e để tối ưu hiệu suất và trải nghiệm người dùng.","tags":["javascript","html","programming","blog"],"title":"Tìm Hiểu JavaScript nên đặt ở đâu ?","uri":"/post/2020/javascript-where-to/"},{"content":"1. Java: Ngôn Ngữ Đa Nền Tảng Java là một ngôn ngữ lập trình hướng đối tượng, được thiết kế để “viết một lần, chạy mọi nơi” (Write Once, Run Anywhere). Điều này có nghĩa là mã Java có thể chạy trên bất kỳ nền tảng nào hỗ trợ Java Virtual Machine (JVM).\nỨng dụng của Java: Phát triển ứng dụng doanh nghiệp (ERP, CRM). Phát triển ứng dụng di động (Android). Ứng dụng web phía server (Spring, Hibernate). Ví dụ mã Java: public class HelloWorld { public static void main(String[] args) { System.out.println(\"Hello, Java!\"); } } 2. JavaScript: Ngôn Ngữ Cho Web JavaScript là một ngôn ngữ lập trình thông dịch được sử dụng chủ yếu để tạo ra các tương tác động trên trang web. Ban đầu, JavaScript chỉ hoạt động trên trình duyệt, nhưng hiện tại, với sự ra đời của Node.js, JavaScript có thể chạy ở cả phía server.\nỨng dụng của JavaScript: Phát triển giao diện người dùng (React, Angular, Vue). Phát triển ứng dụng phía server (Node.js). Tạo ứng dụng di động đa nền tảng (React Native). Ví dụ mã JavaScript: console.log(\"Hello, JavaScript!\"); 3. So sánh Java và JavaScript Đặc điểm Java JavaScript Kiểu ngôn ngữ Biên dịch Thông dịch Môi trường chạy JVM Trình duyệt, Node.js Ứng dụng chính Ứng dụng doanh nghiệp, di động Web, ứng dụng di động, máy chủ Cú pháp Nghiêm ngặt, kiểu tĩnh Linh hoạt, kiểu động 4. Điểm Chung Tên gọi: Dù JavaScript có “Java” trong tên, nhưng đây chỉ là chiến lược tiếp thị vào thời điểm ra mắt. Đều phổ biến: Cả hai ngôn ngữ đều nằm trong danh sách các ngôn ngữ lập trình được sử dụng nhiều nhất thế giới. 5. Lời Kết Java và JavaScript không chỉ khác nhau về cú pháp mà còn khác biệt về mục đích sử dụng. Lựa chọn ngôn ngữ nào phụ thuộc vào mục tiêu dự án:\nNếu bạn muốn xây dựng ứng dụng lớn, ổn định, và có thể mở rộng: Java là lựa chọn phù hợp. Nếu bạn đang làm việc trên các ứng dụng web hoặc giao diện người dùng: JavaScript là công cụ lý tưởng.\n","description":"Khám phá sự khác biệt giữa Java và JavaScript, hai ngôn ngữ lập trình phổ biến trong phát triển phần mềm. Bài viết này sẽ giúp bạn hiểu rõ hơn về từng ngôn ngữ và cách chúng được sử dụng trong các lĩnh vực khác nhau.","tags":["java","javascript","programming","blog"],"title":"Java và JavaScript Sự Khác Biệt và Ứng Dụng","uri":"/post/2020/gioi_thieu_java/"},{"content":"Journaling is not just a little thing you do to pass the time, to write down your memories—though it can be—it’s a strategy that has helped brilliant, powerful and wise people become better at what they do.\n","title":"Note 1","uri":"/notes/2020/change/"},{"content":"Journaling is not just a little thing you do to pass the time, to write down your memories—though it can be—it’s a strategy that has helped brilliant, powerful and wise people become better at what they do.\n","title":"Note 2","uri":"/notes/2020/change2/"},{"content":"Journaling is not just a little thing you do to pass the time, to write down your memories—though it can be—it’s a strategy that has helped brilliant, powerful and wise people become better at what they do.\n","title":"Note 3","uri":"/notes/2020/change3/"},{"content":"\r","title":"","uri":"/layouts/partials/footer_custom/"},{"content":"\r","title":"","uri":"/layouts/partials/head_custom/"}]
